
ADC_LM35_LDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004224  08004224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  0800429c  0800429c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800429c  0800429c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000005c  08004300  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004300  00006334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8ec  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f26  00000000  00000000  00010971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00012898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f8  00000000  00000000  00013440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181b4  00000000  00000000  00013d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebf1  00000000  00000000  0002beec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1d5  00000000  00000000  0003aadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034bc  00000000  00000000  000c7cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cb1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800420c 	.word	0x0800420c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800420c 	.word	0x0800420c

0800014c <delay_us>:

//-------create delay in micro seconds----------------
extern TIM_HandleTypeDef htim2;

void delay_us(uint32_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000154:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <delay_us+0x2c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	2200      	movs	r2, #0
 800015a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us)
 800015c:	bf00      	nop
 800015e:	4b06      	ldr	r3, [pc, #24]	@ (8000178 <delay_us+0x2c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	429a      	cmp	r2, r3
 8000168:	d8f9      	bhi.n	800015e <delay_us+0x12>
	{}

}
 800016a:	bf00      	nop
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000134 	.word	0x20000134

0800017c <LCD_SendCMD>:



//-------Send command to LCD-------------------------
void LCD_SendCMD(uint8_t cmd)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	//Rs pin must be set to 0 for command
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2102      	movs	r1, #2
 800018a:	4842      	ldr	r0, [pc, #264]	@ (8000294 <LCD_SendCMD+0x118>)
 800018c:	f001 fef4 	bl	8001f78 <HAL_GPIO_WritePin>

	//RW pin must be set to 0 to write on LCD
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2104      	movs	r1, #4
 8000194:	483f      	ldr	r0, [pc, #252]	@ (8000294 <LCD_SendCMD+0x118>)
 8000196:	f001 feef 	bl	8001f78 <HAL_GPIO_WritePin>




	//---send higher nibbles---------------
	uint8_t higher_nibble = (cmd >> 4);
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	091b      	lsrs	r3, r3, #4
 800019e:	73fb      	strb	r3, [r7, #15]

	//send cmd to lcd pins
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin,( (higher_nibble>>3) & (0x01) ));
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	08db      	lsrs	r3, r3, #3
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	f003 0301 	and.w	r3, r3, #1
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	461a      	mov	r2, r3
 80001ae:	2180      	movs	r1, #128	@ 0x80
 80001b0:	4838      	ldr	r0, [pc, #224]	@ (8000294 <LCD_SendCMD+0x118>)
 80001b2:	f001 fee1 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin,( (higher_nibble>>2) & (0x01) ));
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	089b      	lsrs	r3, r3, #2
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	f003 0301 	and.w	r3, r3, #1
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	461a      	mov	r2, r3
 80001c4:	2140      	movs	r1, #64	@ 0x40
 80001c6:	4833      	ldr	r0, [pc, #204]	@ (8000294 <LCD_SendCMD+0x118>)
 80001c8:	f001 fed6 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,( (higher_nibble>>1) & (0x01) ));
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	085b      	lsrs	r3, r3, #1
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	f003 0301 	and.w	r3, r3, #1
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	2120      	movs	r1, #32
 80001dc:	482d      	ldr	r0, [pc, #180]	@ (8000294 <LCD_SendCMD+0x118>)
 80001de:	f001 fecb 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,( (higher_nibble>>0) & (0x01) ));
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	461a      	mov	r2, r3
 80001ec:	2110      	movs	r1, #16
 80001ee:	4829      	ldr	r0, [pc, #164]	@ (8000294 <LCD_SendCMD+0x118>)
 80001f0:	f001 fec2 	bl	8001f78 <HAL_GPIO_WritePin>

	//Toggle En pin to set the data
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2108      	movs	r1, #8
 80001f8:	4826      	ldr	r0, [pc, #152]	@ (8000294 <LCD_SendCMD+0x118>)
 80001fa:	f001 febd 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 80001fe:	2064      	movs	r0, #100	@ 0x64
 8000200:	f7ff ffa4 	bl	800014c <delay_us>
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2108      	movs	r1, #8
 8000208:	4822      	ldr	r0, [pc, #136]	@ (8000294 <LCD_SendCMD+0x118>)
 800020a:	f001 feb5 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 800020e:	2064      	movs	r0, #100	@ 0x64
 8000210:	f7ff ff9c 	bl	800014c <delay_us>




	//---send lower nibbles----------------
	uint8_t lower_nibble = (cmd >> 0);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	73bb      	strb	r3, [r7, #14]

	//send cmd to lcd pins
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin,( (lower_nibble>>3) & (0x01) ));
 8000218:	7bbb      	ldrb	r3, [r7, #14]
 800021a:	08db      	lsrs	r3, r3, #3
 800021c:	b2db      	uxtb	r3, r3
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	b2db      	uxtb	r3, r3
 8000224:	461a      	mov	r2, r3
 8000226:	2180      	movs	r1, #128	@ 0x80
 8000228:	481a      	ldr	r0, [pc, #104]	@ (8000294 <LCD_SendCMD+0x118>)
 800022a:	f001 fea5 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin,( (lower_nibble>>2) & (0x01) ));
 800022e:	7bbb      	ldrb	r3, [r7, #14]
 8000230:	089b      	lsrs	r3, r3, #2
 8000232:	b2db      	uxtb	r3, r3
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	2140      	movs	r1, #64	@ 0x40
 800023e:	4815      	ldr	r0, [pc, #84]	@ (8000294 <LCD_SendCMD+0x118>)
 8000240:	f001 fe9a 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,( (lower_nibble>>1) & (0x01) ));
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	085b      	lsrs	r3, r3, #1
 8000248:	b2db      	uxtb	r3, r3
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	b2db      	uxtb	r3, r3
 8000250:	461a      	mov	r2, r3
 8000252:	2120      	movs	r1, #32
 8000254:	480f      	ldr	r0, [pc, #60]	@ (8000294 <LCD_SendCMD+0x118>)
 8000256:	f001 fe8f 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,( (lower_nibble>>0) & (0x01) ));
 800025a:	7bbb      	ldrb	r3, [r7, #14]
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	b2db      	uxtb	r3, r3
 8000262:	461a      	mov	r2, r3
 8000264:	2110      	movs	r1, #16
 8000266:	480b      	ldr	r0, [pc, #44]	@ (8000294 <LCD_SendCMD+0x118>)
 8000268:	f001 fe86 	bl	8001f78 <HAL_GPIO_WritePin>

	//Toggle En pin to set the data
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2108      	movs	r1, #8
 8000270:	4808      	ldr	r0, [pc, #32]	@ (8000294 <LCD_SendCMD+0x118>)
 8000272:	f001 fe81 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 8000276:	2064      	movs	r0, #100	@ 0x64
 8000278:	f7ff ff68 	bl	800014c <delay_us>
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2108      	movs	r1, #8
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <LCD_SendCMD+0x118>)
 8000282:	f001 fe79 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 8000286:	2064      	movs	r0, #100	@ 0x64
 8000288:	f7ff ff60 	bl	800014c <delay_us>
}
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010800 	.word	0x40010800

08000298 <LCD_SendData>:



//-------send Data to LCD------------------------
void LCD_SendData(uint8_t data)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	//Rs pin must be set to 1 for data
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2102      	movs	r1, #2
 80002a6:	4842      	ldr	r0, [pc, #264]	@ (80003b0 <LCD_SendData+0x118>)
 80002a8:	f001 fe66 	bl	8001f78 <HAL_GPIO_WritePin>

	//RW pin must be set to 0 to write on LCD
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2104      	movs	r1, #4
 80002b0:	483f      	ldr	r0, [pc, #252]	@ (80003b0 <LCD_SendData+0x118>)
 80002b2:	f001 fe61 	bl	8001f78 <HAL_GPIO_WritePin>




	//---send higher nibbles---------------
	uint8_t higher_nibble = (data >> 4);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	73fb      	strb	r3, [r7, #15]

	//send data to lcd pins
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin,( (higher_nibble>>3) & (0x01) ));
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	08db      	lsrs	r3, r3, #3
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	461a      	mov	r2, r3
 80002ca:	2180      	movs	r1, #128	@ 0x80
 80002cc:	4838      	ldr	r0, [pc, #224]	@ (80003b0 <LCD_SendData+0x118>)
 80002ce:	f001 fe53 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin,( (higher_nibble>>2) & (0x01) ));
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	089b      	lsrs	r3, r3, #2
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	2140      	movs	r1, #64	@ 0x40
 80002e2:	4833      	ldr	r0, [pc, #204]	@ (80003b0 <LCD_SendData+0x118>)
 80002e4:	f001 fe48 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,( (higher_nibble>>1) & (0x01) ));
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	085b      	lsrs	r3, r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	2120      	movs	r1, #32
 80002f8:	482d      	ldr	r0, [pc, #180]	@ (80003b0 <LCD_SendData+0x118>)
 80002fa:	f001 fe3d 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,( (higher_nibble>>0) & (0x01) ));
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	2110      	movs	r1, #16
 800030a:	4829      	ldr	r0, [pc, #164]	@ (80003b0 <LCD_SendData+0x118>)
 800030c:	f001 fe34 	bl	8001f78 <HAL_GPIO_WritePin>

	//Toggle En pin to set the data
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2108      	movs	r1, #8
 8000314:	4826      	ldr	r0, [pc, #152]	@ (80003b0 <LCD_SendData+0x118>)
 8000316:	f001 fe2f 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 800031a:	2064      	movs	r0, #100	@ 0x64
 800031c:	f7ff ff16 	bl	800014c <delay_us>
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2108      	movs	r1, #8
 8000324:	4822      	ldr	r0, [pc, #136]	@ (80003b0 <LCD_SendData+0x118>)
 8000326:	f001 fe27 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 800032a:	2064      	movs	r0, #100	@ 0x64
 800032c:	f7ff ff0e 	bl	800014c <delay_us>




	//---send lower nibbles----------------
	uint8_t lower_nibble = (data >> 0);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	73bb      	strb	r3, [r7, #14]

	//send data to lcd pins
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin,( (lower_nibble>>3) & (0x01) ));
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	08db      	lsrs	r3, r3, #3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	461a      	mov	r2, r3
 8000342:	2180      	movs	r1, #128	@ 0x80
 8000344:	481a      	ldr	r0, [pc, #104]	@ (80003b0 <LCD_SendData+0x118>)
 8000346:	f001 fe17 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin,( (lower_nibble>>2) & (0x01) ));
 800034a:	7bbb      	ldrb	r3, [r7, #14]
 800034c:	089b      	lsrs	r3, r3, #2
 800034e:	b2db      	uxtb	r3, r3
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	2140      	movs	r1, #64	@ 0x40
 800035a:	4815      	ldr	r0, [pc, #84]	@ (80003b0 <LCD_SendData+0x118>)
 800035c:	f001 fe0c 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,( (lower_nibble>>1) & (0x01) ));
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	085b      	lsrs	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	b2db      	uxtb	r3, r3
 800036c:	461a      	mov	r2, r3
 800036e:	2120      	movs	r1, #32
 8000370:	480f      	ldr	r0, [pc, #60]	@ (80003b0 <LCD_SendData+0x118>)
 8000372:	f001 fe01 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,( (lower_nibble>>0) & (0x01) ));
 8000376:	7bbb      	ldrb	r3, [r7, #14]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	2110      	movs	r1, #16
 8000382:	480b      	ldr	r0, [pc, #44]	@ (80003b0 <LCD_SendData+0x118>)
 8000384:	f001 fdf8 	bl	8001f78 <HAL_GPIO_WritePin>

	//Toggle En pin to set the data
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2108      	movs	r1, #8
 800038c:	4808      	ldr	r0, [pc, #32]	@ (80003b0 <LCD_SendData+0x118>)
 800038e:	f001 fdf3 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 8000392:	2064      	movs	r0, #100	@ 0x64
 8000394:	f7ff feda 	bl	800014c <delay_us>
	HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2108      	movs	r1, #8
 800039c:	4804      	ldr	r0, [pc, #16]	@ (80003b0 <LCD_SendData+0x118>)
 800039e:	f001 fdeb 	bl	8001f78 <HAL_GPIO_WritePin>
	delay_us(100);
 80003a2:	2064      	movs	r0, #100	@ 0x64
 80003a4:	f7ff fed2 	bl	800014c <delay_us>
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010800 	.word	0x40010800

080003b4 <LCD_Init>:



//-------initialize LCD-------------
void LCD_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_Delay(100);			// wait 100ms for settle time
 80003b8:	2064      	movs	r0, #100	@ 0x64
 80003ba:	f000 fd77 	bl	8000eac <HAL_Delay>

	//---Function Set-----------------
	LCD_SendCMD(0x02); 		//initialize LCD in 4-bit mode
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff fedc 	bl	800017c <LCD_SendCMD>
	HAL_Delay(1);			//wait
 80003c4:	2001      	movs	r0, #1
 80003c6:	f000 fd71 	bl	8000eac <HAL_Delay>
	LCD_SendCMD(0x28);		//2 lines, 5x8 dots format display mode
 80003ca:	2028      	movs	r0, #40	@ 0x28
 80003cc:	f7ff fed6 	bl	800017c <LCD_SendCMD>
	HAL_Delay(1);			//wait
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fd6b 	bl	8000eac <HAL_Delay>


	//---Display on/off---------------
	LCD_SendCMD(0x0C);		//display on
 80003d6:	200c      	movs	r0, #12
 80003d8:	f7ff fed0 	bl	800017c <LCD_SendCMD>
	HAL_Delay(1);			//wait
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 fd65 	bl	8000eac <HAL_Delay>


	//---Entry Mode-------------------
	LCD_SendCMD(0x06);		//increment cursor
 80003e2:	2006      	movs	r0, #6
 80003e4:	f7ff feca 	bl	800017c <LCD_SendCMD>
	HAL_Delay(1);			//wait
 80003e8:	2001      	movs	r0, #1
 80003ea:	f000 fd5f 	bl	8000eac <HAL_Delay>


	//---Clear Display----------------
	LCD_SendCMD(0x01);		//clear display
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff fec4 	bl	800017c <LCD_SendCMD>
	HAL_Delay(1);			//wait
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fd59 	bl	8000eac <HAL_Delay>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}

080003fe <LCD_SendStr>:



//-------Send string to the LCD-------------
void LCD_SendStr(char* str)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	while(*str)
 8000406:	e006      	b.n	8000416 <LCD_SendStr+0x18>
	{
		LCD_SendData(*str++);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff41 	bl	8000298 <LCD_SendData>
	while(*str)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f4      	bne.n	8000408 <LCD_SendStr+0xa>
	}
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <LCD_SetCursor>:



//-------Set Cursor-------------------------
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
	uint8_t address;

	if(row == 0)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d103      	bne.n	8000446 <LCD_SetCursor+0x1e>
	{
		address = 0x80 + col;	//First row
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	3b80      	subs	r3, #128	@ 0x80
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e002      	b.n	800044c <LCD_SetCursor+0x24>
	}
	else						// if(row == 1)
	{
		address = 0xC0 + col;	//Second row
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	3b40      	subs	r3, #64	@ 0x40
 800044a:	73fb      	strb	r3, [r7, #15]
	}

	LCD_SendCMD(address);
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff fe94 	bl	800017c <LCD_SendCMD>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 fcc2 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f866 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 fa58 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 800046c:	f000 fa38 	bl	80008e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000470:	f000 f8b6 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000474:	f000 f90a 	bl	800068c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000478:	f000 f990 	bl	800079c <MX_TIM2_Init>
  MX_TIM3_Init();
 800047c:	f000 f9de 	bl	800083c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000480:	f7ff ff98 	bl	80003b4 <LCD_Init>

  HAL_Delay(100);
 8000484:	2064      	movs	r0, #100	@ 0x64
 8000486:	f000 fd11 	bl	8000eac <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag1sec)
 800048a:	4b22      	ldr	r3, [pc, #136]	@ (8000514 <main+0xb8>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d02c      	beq.n	80004ec <main+0x90>
	  {
		  sprintf(buffer,"warmth: %d",temprature);
 8000492:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <main+0xbc>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	461a      	mov	r2, r3
 8000498:	4920      	ldr	r1, [pc, #128]	@ (800051c <main+0xc0>)
 800049a:	4821      	ldr	r0, [pc, #132]	@ (8000520 <main+0xc4>)
 800049c:	f003 fa06 	bl	80038ac <siprintf>
		  LCD_SetCursor(0, 0);
 80004a0:	2100      	movs	r1, #0
 80004a2:	2000      	movs	r0, #0
 80004a4:	f7ff ffc0 	bl	8000428 <LCD_SetCursor>
		  LCD_SendStr(buffer);
 80004a8:	481d      	ldr	r0, [pc, #116]	@ (8000520 <main+0xc4>)
 80004aa:	f7ff ffa8 	bl	80003fe <LCD_SendStr>
		  LCD_SetCursor(0, 10);
 80004ae:	210a      	movs	r1, #10
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffb9 	bl	8000428 <LCD_SetCursor>
		  LCD_SendData(223);	//write ° on lcd
 80004b6:	20df      	movs	r0, #223	@ 0xdf
 80004b8:	f7ff feee 	bl	8000298 <LCD_SendData>
		  LCD_SetCursor(0, 11);
 80004bc:	210b      	movs	r1, #11
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ffb2 	bl	8000428 <LCD_SetCursor>
		  LCD_SendStr("C");
 80004c4:	4817      	ldr	r0, [pc, #92]	@ (8000524 <main+0xc8>)
 80004c6:	f7ff ff9a 	bl	80003fe <LCD_SendStr>

		  sprintf(buffer,"LDR:    %d  ",LDR);
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <main+0xcc>)
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4916      	ldr	r1, [pc, #88]	@ (800052c <main+0xd0>)
 80004d2:	4813      	ldr	r0, [pc, #76]	@ (8000520 <main+0xc4>)
 80004d4:	f003 f9ea 	bl	80038ac <siprintf>
		  LCD_SetCursor(1, 0);
 80004d8:	2100      	movs	r1, #0
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ffa4 	bl	8000428 <LCD_SetCursor>
		  LCD_SendStr(buffer);
 80004e0:	480f      	ldr	r0, [pc, #60]	@ (8000520 <main+0xc4>)
 80004e2:	f7ff ff8c 	bl	80003fe <LCD_SendStr>
		  flag1sec = 0;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <main+0xb8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
	  }

	  if(LDR < 1000)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <main+0xcc>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004f4:	d206      	bcs.n	8000504 <main+0xa8>
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004fc:	480c      	ldr	r0, [pc, #48]	@ (8000530 <main+0xd4>)
 80004fe:	f001 fd3b 	bl	8001f78 <HAL_GPIO_WritePin>
 8000502:	e7c2      	b.n	800048a <main+0x2e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <main+0xd4>)
 800050c:	f001 fd34 	bl	8001f78 <HAL_GPIO_WritePin>
	  if(flag1sec)
 8000510:	e7bb      	b.n	800048a <main+0x2e>
 8000512:	bf00      	nop
 8000514:	200001d0 	.word	0x200001d0
 8000518:	200001cc 	.word	0x200001cc
 800051c:	08004224 	.word	0x08004224
 8000520:	200001d4 	.word	0x200001d4
 8000524:	08004230 	.word	0x08004230
 8000528:	200001ce 	.word	0x200001ce
 800052c:	08004234 	.word	0x08004234
 8000530:	40010800 	.word	0x40010800

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800053e:	2228      	movs	r2, #40	@ 0x28
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f9d2 	bl	80038ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000574:	2300      	movs	r3, #0
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000578:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800057c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fd10 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800058e:	f000 fa5f 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 ff7d 	bl	80024ac <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005b8:	f000 fa4a 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005bc:	2302      	movs	r3, #2
 80005be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f8cc 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d2:	f000 fa3d 	bl	8000a50 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	@ 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f0:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <MX_ADC1_Init+0xa0>)
 80005f2:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <MX_ADC1_Init+0xa4>)
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005f6:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <MX_ADC1_Init+0xa0>)
 80005f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000600:	2200      	movs	r2, #0
 8000602:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 800060a:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <MX_ADC1_Init+0xa0>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000618:	2202      	movs	r2, #2
 800061a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4818      	ldr	r0, [pc, #96]	@ (8000680 <MX_ADC1_Init+0xa0>)
 800061e:	f000 fc69 	bl	8000ef4 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 fa12 	bl	8000a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800062c:	2308      	movs	r3, #8
 800062e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000630:	2301      	movs	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000634:	2306      	movs	r3, #6
 8000636:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4810      	ldr	r0, [pc, #64]	@ (8000680 <MX_ADC1_Init+0xa0>)
 800063e:	f000 fe21 	bl	8001284 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000648:	f000 fa02 	bl	8000a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800064c:	2309      	movs	r3, #9
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000650:	2302      	movs	r3, #2
 8000652:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000654:	2307      	movs	r3, #7
 8000656:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <MX_ADC1_Init+0xa0>)
 800065e:	f000 fe11 	bl	8001284 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000668:	f000 f9f2 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)RawValue, 2);
 800066c:	2202      	movs	r2, #2
 800066e:	4906      	ldr	r1, [pc, #24]	@ (8000688 <MX_ADC1_Init+0xa8>)
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000672:	f000 fd17 	bl	80010a4 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000078 	.word	0x20000078
 8000684:	40012400 	.word	0x40012400
 8000688:	200001c4 	.word	0x200001c4

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	@ 0x48
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f918 	bl	80038ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006bc:	4b35      	ldr	r3, [pc, #212]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006be:	4a36      	ldr	r2, [pc, #216]	@ (8000798 <MX_TIM1_Init+0x10c>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 80006c2:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006c4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80006c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b32      	ldr	r3, [pc, #200]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006d0:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006d2:	2263      	movs	r2, #99	@ 0x63
 80006d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e8:	482a      	ldr	r0, [pc, #168]	@ (8000794 <MX_TIM1_Init+0x108>)
 80006ea:	f002 f9dd 	bl	8002aa8 <HAL_TIM_PWM_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006f4:	f000 f9ac 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000700:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000704:	4619      	mov	r1, r3
 8000706:	4823      	ldr	r0, [pc, #140]	@ (8000794 <MX_TIM1_Init+0x108>)
 8000708:	f003 f80e 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000712:	f000 f99d 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000716:	2360      	movs	r3, #96	@ 0x60
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100/2;
 800071a:	2332      	movs	r3, #50	@ 0x32
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	4816      	ldr	r0, [pc, #88]	@ (8000794 <MX_TIM1_Init+0x108>)
 800073c:	f002 fb96 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000746:	f000 f983 	bl	8000a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000762:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_TIM1_Init+0x108>)
 800076e:	f003 f839 	bl	80037e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000778:	f000 f96a 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		//ADC trigger
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_TIM1_Init+0x108>)
 8000780:	f002 f9e2 	bl	8002b48 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <MX_TIM1_Init+0x108>)
 8000786:	f000 fa59 	bl	8000c3c <HAL_TIM_MspPostInit>

}
 800078a:	bf00      	nop
 800078c:	3748      	adds	r7, #72	@ 0x48
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000ec 	.word	0x200000ec
 8000798:	40012c00 	.word	0x40012c00

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007c2:	220f      	movs	r2, #15
 80007c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e0:	4815      	ldr	r0, [pc, #84]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007e2:	f002 f875 	bl	80028d0 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007ec:	f000 f930 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	480e      	ldr	r0, [pc, #56]	@ (8000838 <MX_TIM2_Init+0x9c>)
 80007fe:	f002 fbf7 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f922 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM2_Init+0x9c>)
 800081a:	f002 ff85 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f914 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);	//create delay in us
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM2_Init+0x9c>)
 800082a:	f002 f8a1 	bl	8002970 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000134 	.word	0x20000134

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 800085a:	4a20      	ldr	r2, [pc, #128]	@ (80008dc <MX_TIM3_Init+0xa0>)
 800085c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 8000860:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 800086e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000880:	4815      	ldr	r0, [pc, #84]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 8000882:	f002 f825 	bl	80028d0 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800088c:	f000 f8e0 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 800089e:	f002 fba7 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 f8d2 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 80008ba:	f002 ff35 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f8c4 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);		// 1 second timer
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MX_TIM3_Init+0x9c>)
 80008ca:	f002 f89b 	bl	8002a04 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000017c 	.word	0x2000017c
 80008dc:	40000400 	.word	0x40000400

080008e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_DMA_Init+0x38>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <MX_DMA_Init+0x38>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_DMA_Init+0x38>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	200b      	movs	r0, #11
 8000904:	f000 ff8f 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000908:	200b      	movs	r0, #11
 800090a:	f000 ffa8 	bl	800185e <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_GPIO_Init+0x90>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a1d      	ldr	r2, [pc, #116]	@ (80009ac <MX_GPIO_Init+0x90>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_GPIO_Init+0x90>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <MX_GPIO_Init+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a17      	ldr	r2, [pc, #92]	@ (80009ac <MX_GPIO_Init+0x90>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <MX_GPIO_Init+0x90>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_GPIO_Init+0x90>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <MX_GPIO_Init+0x90>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_GPIO_Init+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|En_Pin|D4_Pin
 8000978:	2200      	movs	r2, #0
 800097a:	f240 21fe 	movw	r1, #766	@ 0x2fe
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <MX_GPIO_Init+0x94>)
 8000980:	f001 fafa 	bl	8001f78 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin RW_Pin En_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin LED_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|En_Pin|D4_Pin
 8000984:	f240 23fe 	movw	r3, #766	@ 0x2fe
 8000988:	613b      	str	r3, [r7, #16]
                          |D5_Pin|D6_Pin|D7_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_GPIO_Init+0x94>)
 800099e:	f001 f967 	bl	8001c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010800 	.word	0x40010800

080009b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//-------ADC callBack Routine-------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	for(int i=0;i<=1;i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e017      	b.n	80009f2 <HAL_ADC_ConvCpltCallback+0x3e>
	{
		ADC_Voltage[i] = RawValue[i] * 3300 / 4095;		//Vref = 3300 mV, resolution = 12 bits
 80009c2:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x68>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ca:	461a      	mov	r2, r3
 80009cc:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x6c>)
 80009d6:	fb82 1203 	smull	r1, r2, r2, r3
 80009da:	441a      	add	r2, r3
 80009dc:	12d2      	asrs	r2, r2, #11
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	b299      	uxth	r1, r3
 80009e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x70>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<=1;i++)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	dde4      	ble.n	80009c2 <HAL_ADC_ConvCpltCallback+0xe>
	}

	temprature = ADC_Voltage[0] / 10;	//lm35: 10mV/°C
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x70>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <HAL_ADC_ConvCpltCallback+0x74>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_ADC_ConvCpltCallback+0x78>)
 8000a08:	801a      	strh	r2, [r3, #0]
	LDR		   = ADC_Voltage[1];		//LDR value
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a0c:	885a      	ldrh	r2, [r3, #2]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000a10:	801a      	strh	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	200001c4 	.word	0x200001c4
 8000a20:	80080081 	.word	0x80080081
 8000a24:	200001c8 	.word	0x200001c8
 8000a28:	cccccccd 	.word	0xcccccccd
 8000a2c:	200001cc 	.word	0x200001cc
 8000a30:	200001ce 	.word	0x200001ce

08000a34 <HAL_TIM_PeriodElapsedCallback>:

//-------Timer callBack Routine------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	flag1sec = 1;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	200001d0 	.word	0x200001d0

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_MspInit+0x60>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_MspInit+0x60>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000

08000ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a28      	ldr	r2, [pc, #160]	@ (8000b7c <HAL_ADC_MspInit+0xbc>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d149      	bne.n	8000b74 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <HAL_ADC_MspInit+0xc0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a26      	ldr	r2, [pc, #152]	@ (8000b80 <HAL_ADC_MspInit+0xc0>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <HAL_ADC_MspInit+0xc0>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <HAL_ADC_MspInit+0xc0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a20      	ldr	r2, [pc, #128]	@ (8000b80 <HAL_ADC_MspInit+0xc0>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <HAL_ADC_MspInit+0xc0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b10:	2303      	movs	r3, #3
 8000b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <HAL_ADC_MspInit+0xc4>)
 8000b20:	f001 f8a6 	bl	8001c70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b26:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_ADC_MspInit+0xcc>)
 8000b28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b38:	2280      	movs	r2, #128	@ 0x80
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b4e:	2220      	movs	r2, #32
 8000b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b5a:	f000 fe9b 	bl	8001894 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b64:	f7ff ff74 	bl	8000a50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b6c:	621a      	str	r2, [r3, #32]
 8000b6e:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_ADC_MspInit+0xc8>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40012400 	.word	0x40012400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	40020008 	.word	0x40020008

08000b90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x34>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10b      	bne.n	8000bba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_TIM_PWM_MspInit+0x38>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_TIM_Base_MspInit+0x68>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <HAL_TIM_Base_MspInit+0x68>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_TIM_Base_MspInit+0x68>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bf6:	e018      	b.n	8000c2a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_TIM_Base_MspInit+0x6c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_TIM_Base_MspInit+0x68>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_TIM_Base_MspInit+0x68>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_TIM_Base_MspInit+0x68>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201d      	movs	r0, #29
 8000c20:	f000 fe01 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c24:	201d      	movs	r0, #29
 8000c26:	f000 fe1a 	bl	800185e <HAL_NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40000400 	.word	0x40000400

08000c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a10      	ldr	r2, [pc, #64]	@ (8000c98 <HAL_TIM_MspPostInit+0x5c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d118      	bne.n	8000c8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_TIM_MspPostInit+0x60>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_TIM_MspPostInit+0x60>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_TIM_MspPostInit+0x60>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <HAL_TIM_MspPostInit+0x64>)
 8000c8a:	f000 fff1 	bl	8001c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3720      	adds	r7, #32
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <NMI_Handler+0x4>

08000cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8be 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <DMA1_Channel1_IRQHandler+0x10>)
 8000d02:	f000 fe81 	bl	8001a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000a8 	.word	0x200000a8

08000d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <TIM3_IRQHandler+0x10>)
 8000d16:	f001 ffb9 	bl	8002c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000017c 	.word	0x2000017c

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f002 fdd2 	bl	80038fc <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20005000 	.word	0x20005000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200001e4 	.word	0x200001e4
 8000d8c:	20000338 	.word	0x20000338

08000d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d9c:	f7ff fff8 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000da2:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000db8:	4c09      	ldr	r4, [pc, #36]	@ (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f002 fd9f 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dca:	f7ff fb47 	bl	800045c <main>
  bx lr
 8000dce:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dd8:	080042a4 	.word	0x080042a4
  ldr r2, =_sbss
 8000ddc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000de0:	20000334 	.word	0x20000334

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_Init+0x28>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_Init+0x28>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 fd09 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe2a 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fd21 	bl	800187a <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 fce9 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_IncTick+0x1c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a03      	ldr	r2, [pc, #12]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200001e8 	.word	0x200001e8

08000e98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ea8 <HAL_GetTick+0x10>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	200001e8 	.word	0x200001e8

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fff0 	bl	8000e98 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffe0 	bl	8000e98 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0be      	b.n	8001094 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d109      	bne.n	8000f38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fdc4 	bl	8000ac0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 faf5 	bl	8001528 <ADC_ConversionStop_Disable>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f040 8099 	bne.w	8001082 <HAL_ADC_Init+0x18e>
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 8095 	bne.w	8001082 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f60:	f023 0302 	bic.w	r3, r3, #2
 8000f64:	f043 0202 	orr.w	r2, r3, #2
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7b1b      	ldrb	r3, [r3, #12]
 8000f7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f8c:	d003      	beq.n	8000f96 <HAL_ADC_Init+0xa2>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d102      	bne.n	8000f9c <HAL_ADC_Init+0xa8>
 8000f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9a:	e000      	b.n	8000f9e <HAL_ADC_Init+0xaa>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7d1b      	ldrb	r3, [r3, #20]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d119      	bne.n	8000fe0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7b1b      	ldrb	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d109      	bne.n	8000fc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	035a      	lsls	r2, r3, #13
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fcc:	f043 0220 	orr.w	r2, r3, #32
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	4b28      	ldr	r3, [pc, #160]	@ (800109c <HAL_ADC_Init+0x1a8>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	430b      	orrs	r3, r1
 8001006:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001010:	d003      	beq.n	800101a <HAL_ADC_Init+0x126>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d104      	bne.n	8001024 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	3b01      	subs	r3, #1
 8001020:	051b      	lsls	r3, r3, #20
 8001022:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	430a      	orrs	r2, r1
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <HAL_ADC_Init+0x1ac>)
 8001040:	4013      	ands	r3, r2
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	429a      	cmp	r2, r3
 8001046:	d10b      	bne.n	8001060 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800105e:	e018      	b.n	8001092 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001064:	f023 0312 	bic.w	r3, r3, #18
 8001068:	f043 0210 	orr.w	r2, r3, #16
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001074:	f043 0201 	orr.w	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001080:	e007      	b.n	8001092 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001086:	f043 0210 	orr.w	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	ffe1f7fd 	.word	0xffe1f7fd
 80010a0:	ff1f0efe 	.word	0xff1f0efe

080010a4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a64      	ldr	r2, [pc, #400]	@ (800124c <HAL_ADC_Start_DMA+0x1a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d004      	beq.n	80010c8 <HAL_ADC_Start_DMA+0x24>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a63      	ldr	r2, [pc, #396]	@ (8001250 <HAL_ADC_Start_DMA+0x1ac>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d106      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x32>
 80010c8:	4b60      	ldr	r3, [pc, #384]	@ (800124c <HAL_ADC_Start_DMA+0x1a8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 80b3 	bne.w	800123c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_Start_DMA+0x40>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e0ae      	b.n	8001242 <HAL_ADC_Start_DMA+0x19e>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f9c1 	bl	8001474 <ADC_Enable>
 80010f2:	4603      	mov	r3, r0
 80010f4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f040 809a 	bne.w	8001232 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001102:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a4e      	ldr	r2, [pc, #312]	@ (8001250 <HAL_ADC_Start_DMA+0x1ac>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d105      	bne.n	8001128 <HAL_ADC_Start_DMA+0x84>
 800111c:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <HAL_ADC_Start_DMA+0x1a8>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d115      	bne.n	8001154 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113e:	2b00      	cmp	r3, #0
 8001140:	d026      	beq.n	8001190 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001146:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800114a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001152:	e01d      	b.n	8001190 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001158:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a39      	ldr	r2, [pc, #228]	@ (800124c <HAL_ADC_Start_DMA+0x1a8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d004      	beq.n	8001174 <HAL_ADC_Start_DMA+0xd0>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a38      	ldr	r2, [pc, #224]	@ (8001250 <HAL_ADC_Start_DMA+0x1ac>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d10d      	bne.n	8001190 <HAL_ADC_Start_DMA+0xec>
 8001174:	4b35      	ldr	r3, [pc, #212]	@ (800124c <HAL_ADC_Start_DMA+0x1a8>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001188:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a0:	f023 0206 	bic.w	r2, r3, #6
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011a8:	e002      	b.n	80011b0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <HAL_ADC_Start_DMA+0x1b0>)
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a24      	ldr	r2, [pc, #144]	@ (8001258 <HAL_ADC_Start_DMA+0x1b4>)
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a23      	ldr	r2, [pc, #140]	@ (800125c <HAL_ADC_Start_DMA+0x1b8>)
 80011ce:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 0202 	mvn.w	r2, #2
 80011d8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011e8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a18      	ldr	r0, [r3, #32]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	334c      	adds	r3, #76	@ 0x4c
 80011f4:	4619      	mov	r1, r3
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f000 fba5 	bl	8001948 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001208:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800120c:	d108      	bne.n	8001220 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800121c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800121e:	e00f      	b.n	8001240 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800122e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001230:	e006      	b.n	8001240 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800123a:	e001      	b.n	8001240 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001240:	7dfb      	ldrb	r3, [r7, #23]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012400 	.word	0x40012400
 8001250:	40012800 	.word	0x40012800
 8001254:	080015ab 	.word	0x080015ab
 8001258:	08001627 	.word	0x08001627
 800125c:	08001643 	.word	0x08001643

08001260 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x20>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e0dc      	b.n	800145e <HAL_ADC_ConfigChannel+0x1da>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b06      	cmp	r3, #6
 80012b2:	d81c      	bhi.n	80012ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	221f      	movs	r2, #31
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b05      	subs	r3, #5
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ec:	e03c      	b.n	8001368 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	d81c      	bhi.n	8001330 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b23      	subs	r3, #35	@ 0x23
 8001308:	221f      	movs	r2, #31
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	4019      	ands	r1, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	3b23      	subs	r3, #35	@ 0x23
 8001322:	fa00 f203 	lsl.w	r2, r0, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	631a      	str	r2, [r3, #48]	@ 0x30
 800132e:	e01b      	b.n	8001368 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	3b41      	subs	r3, #65	@ 0x41
 8001342:	221f      	movs	r2, #31
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4019      	ands	r1, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b41      	subs	r3, #65	@ 0x41
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d91c      	bls.n	80013aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68d9      	ldr	r1, [r3, #12]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	3b1e      	subs	r3, #30
 8001382:	2207      	movs	r2, #7
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6898      	ldr	r0, [r3, #8]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	3b1e      	subs	r3, #30
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	e019      	b.n	80013de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6919      	ldr	r1, [r3, #16]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	2207      	movs	r2, #7
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4019      	ands	r1, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6898      	ldr	r0, [r3, #8]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	fa00 f203 	lsl.w	r2, r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d003      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ea:	2b11      	cmp	r3, #17
 80013ec:	d132      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_ADC_ConfigChannel+0x1e4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d125      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d126      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001414:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b10      	cmp	r3, #16
 800141c:	d11a      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_ADC_ConfigChannel+0x1e8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <HAL_ADC_ConfigChannel+0x1ec>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	0c9a      	lsrs	r2, r3, #18
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001434:	e002      	b.n	800143c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3b01      	subs	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x1b2>
 8001442:	e007      	b.n	8001454 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001448:	f043 0220 	orr.w	r2, r3, #32
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40012400 	.word	0x40012400
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83

08001474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d040      	beq.n	8001514 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <ADC_Enable+0xac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001524 <ADC_Enable+0xb0>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	0c9b      	lsrs	r3, r3, #18
 80014ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b0:	e002      	b.n	80014b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014be:	f7ff fceb 	bl	8000e98 <HAL_GetTick>
 80014c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	e01f      	b.n	8001506 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014c6:	f7ff fce7 	bl	8000e98 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d918      	bls.n	8001506 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d011      	beq.n	8001506 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e007      	b.n	8001516 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d1d8      	bne.n	80014c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d12e      	bne.n	80015a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001552:	f7ff fca1 	bl	8000e98 <HAL_GetTick>
 8001556:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001558:	e01b      	b.n	8001592 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800155a:	f7ff fc9d 	bl	8000e98 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d914      	bls.n	8001592 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10d      	bne.n	8001592 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e007      	b.n	80015a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d0dc      	beq.n	800155a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d127      	bne.n	8001614 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015de:	d115      	bne.n	800160c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff f9d1 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001612:	e004      	b.n	800161e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fe13 	bl	8001260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	f043 0204 	orr.w	r2, r3, #4
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fe02 	bl	8001272 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4906      	ldr	r1, [pc, #24]	@ (8001710 <__NVIC_EnableIRQ+0x34>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	@ (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff90 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff2d 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff42 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff90 	bl	8001768 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5f 	bl	8001714 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff35 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e043      	b.n	8001932 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_DMA_Init+0xa8>)
 80018b2:	4413      	add	r3, r2
 80018b4:	4a22      	ldr	r2, [pc, #136]	@ (8001940 <HAL_DMA_Init+0xac>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	009a      	lsls	r2, r3, #2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001944 <HAL_DMA_Init+0xb0>)
 80018c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	bffdfff8 	.word	0xbffdfff8
 8001940:	cccccccd 	.word	0xcccccccd
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Start_IT+0x20>
 8001964:	2302      	movs	r3, #2
 8001966:	e04b      	b.n	8001a00 <HAL_DMA_Start_IT+0xb8>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d13a      	bne.n	80019f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f937 	bl	8001c14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 020e 	orr.w	r2, r2, #14
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00f      	b.n	80019e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0204 	bic.w	r2, r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 020a 	orr.w	r2, r2, #10
 80019de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e005      	b.n	80019fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019fa:	2302      	movs	r3, #2
 80019fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	2204      	movs	r2, #4
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d04f      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xc8>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0204 	bic.w	r2, r2, #4
 8001a56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a66      	ldr	r2, [pc, #408]	@ (8001bf8 <HAL_DMA_IRQHandler+0x1f0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d029      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0xae>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a65      	ldr	r2, [pc, #404]	@ (8001bfc <HAL_DMA_IRQHandler+0x1f4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0xaa>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a63      	ldr	r2, [pc, #396]	@ (8001c00 <HAL_DMA_IRQHandler+0x1f8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01a      	beq.n	8001aac <HAL_DMA_IRQHandler+0xa4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a62      	ldr	r2, [pc, #392]	@ (8001c04 <HAL_DMA_IRQHandler+0x1fc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d012      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x9e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a60      	ldr	r2, [pc, #384]	@ (8001c08 <HAL_DMA_IRQHandler+0x200>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00a      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x98>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8001c0c <HAL_DMA_IRQHandler+0x204>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d102      	bne.n	8001a9a <HAL_DMA_IRQHandler+0x92>
 8001a94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a98:	e00e      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xb0>
 8001a9a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a9e:	e00b      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xb0>
 8001aa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001aa4:	e008      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xb0>
 8001aa6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001aaa:	e005      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xb0>
 8001aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab0:	e002      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xb0>
 8001ab2:	2340      	movs	r3, #64	@ 0x40
 8001ab4:	e000      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xb0>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	4a55      	ldr	r2, [pc, #340]	@ (8001c10 <HAL_DMA_IRQHandler+0x208>)
 8001aba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8094 	beq.w	8001bee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ace:	e08e      	b.n	8001bee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d056      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x186>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d051      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020a 	bic.w	r2, r2, #10
 8001b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a38      	ldr	r2, [pc, #224]	@ (8001bf8 <HAL_DMA_IRQHandler+0x1f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d029      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x166>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a37      	ldr	r2, [pc, #220]	@ (8001bfc <HAL_DMA_IRQHandler+0x1f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d022      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x162>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a35      	ldr	r2, [pc, #212]	@ (8001c00 <HAL_DMA_IRQHandler+0x1f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x15c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <HAL_DMA_IRQHandler+0x1fc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d012      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x156>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a32      	ldr	r2, [pc, #200]	@ (8001c08 <HAL_DMA_IRQHandler+0x200>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00a      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x150>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <HAL_DMA_IRQHandler+0x204>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d102      	bne.n	8001b52 <HAL_DMA_IRQHandler+0x14a>
 8001b4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b50:	e00e      	b.n	8001b70 <HAL_DMA_IRQHandler+0x168>
 8001b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b56:	e00b      	b.n	8001b70 <HAL_DMA_IRQHandler+0x168>
 8001b58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b5c:	e008      	b.n	8001b70 <HAL_DMA_IRQHandler+0x168>
 8001b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b62:	e005      	b.n	8001b70 <HAL_DMA_IRQHandler+0x168>
 8001b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b68:	e002      	b.n	8001b70 <HAL_DMA_IRQHandler+0x168>
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e000      	b.n	8001b70 <HAL_DMA_IRQHandler+0x168>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	4a27      	ldr	r2, [pc, #156]	@ (8001c10 <HAL_DMA_IRQHandler+0x208>)
 8001b72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d034      	beq.n	8001bee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b8c:	e02f      	b.n	8001bee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	2208      	movs	r2, #8
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d028      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x1e8>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
    }
  }
  return;
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
}
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020008 	.word	0x40020008
 8001bfc:	4002001c 	.word	0x4002001c
 8001c00:	40020030 	.word	0x40020030
 8001c04:	40020044 	.word	0x40020044
 8001c08:	40020058 	.word	0x40020058
 8001c0c:	4002006c 	.word	0x4002006c
 8001c10:	40020000 	.word	0x40020000

08001c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d108      	bne.n	8001c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c52:	e007      	b.n	8001c64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	@ 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e169      	b.n	8001f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8158 	bne.w	8001f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cac:	4a98      	ldr	r2, [pc, #608]	@ (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d875      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cb2:	4a98      	ldr	r2, [pc, #608]	@ (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d058      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cb8:	4a96      	ldr	r2, [pc, #600]	@ (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d86f      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cbe:	4a96      	ldr	r2, [pc, #600]	@ (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d052      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cc4:	4a94      	ldr	r2, [pc, #592]	@ (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d869      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cca:	4a94      	ldr	r2, [pc, #592]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04c      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cd0:	4a92      	ldr	r2, [pc, #584]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d863      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cd6:	4a92      	ldr	r2, [pc, #584]	@ (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d046      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a90      	ldr	r2, [pc, #576]	@ (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d85d      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d82a      	bhi.n	8001d3c <HAL_GPIO_Init+0xcc>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d859      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cea:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <HAL_GPIO_Init+0x80>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d57 	.word	0x08001d57
 8001cfc:	08001d99 	.word	0x08001d99
 8001d00:	08001d9f 	.word	0x08001d9f
 8001d04:	08001d9f 	.word	0x08001d9f
 8001d08:	08001d9f 	.word	0x08001d9f
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001d9f 	.word	0x08001d9f
 8001d14:	08001d9f 	.word	0x08001d9f
 8001d18:	08001d9f 	.word	0x08001d9f
 8001d1c:	08001d9f 	.word	0x08001d9f
 8001d20:	08001d9f 	.word	0x08001d9f
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d9f 	.word	0x08001d9f
 8001d2c:	08001d9f 	.word	0x08001d9f
 8001d30:	08001d9f 	.word	0x08001d9f
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d61 	.word	0x08001d61
 8001d3c:	4a79      	ldr	r2, [pc, #484]	@ (8001f24 <HAL_GPIO_Init+0x2b4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e02c      	b.n	8001d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e029      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e024      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e01f      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	330c      	adds	r3, #12
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e01a      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d72:	2304      	movs	r3, #4
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e013      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	611a      	str	r2, [r3, #16]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	615a      	str	r2, [r3, #20]
          break;
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          break;
 8001d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	@ 0xff
 8001da4:	d801      	bhi.n	8001daa <HAL_GPIO_Init+0x13a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_Init+0x13e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_Init+0x14c>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x152>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	210f      	movs	r1, #15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80b1 	beq.w	8001f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b4d      	ldr	r3, [pc, #308]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e08:	4a48      	ldr	r2, [pc, #288]	@ (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1ec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3f      	ldr	r2, [pc, #252]	@ (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1e8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3d      	ldr	r2, [pc, #244]	@ (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e0>
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e6e:	492f      	ldr	r1, [pc, #188]	@ (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e88:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	492c      	ldr	r1, [pc, #176]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e96:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4928      	ldr	r1, [pc, #160]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4922      	ldr	r1, [pc, #136]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	491e      	ldr	r1, [pc, #120]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4918      	ldr	r1, [pc, #96]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee6:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4914      	ldr	r1, [pc, #80]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d021      	beq.n	8001f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e021      	b.n	8001f52 <HAL_GPIO_Init+0x2e2>
 8001f0e:	bf00      	nop
 8001f10:	10320000 	.word	0x10320000
 8001f14:	10310000 	.word	0x10310000
 8001f18:	10220000 	.word	0x10220000
 8001f1c:	10210000 	.word	0x10210000
 8001f20:	10120000 	.word	0x10120000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40011400 	.word	0x40011400
 8001f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4909      	ldr	r1, [pc, #36]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	3301      	adds	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f ae8e 	bne.w	8001c84 <HAL_GPIO_Init+0x14>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	372c      	adds	r7, #44	@ 0x2c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e272      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4b92      	ldr	r3, [pc, #584]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00c      	beq.n	8001fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d112      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	4b89      	ldr	r3, [pc, #548]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x12c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d168      	bne.n	80020d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e24c      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x76>
 8002010:	4b80      	ldr	r3, [pc, #512]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a7f      	ldr	r2, [pc, #508]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e02e      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x98>
 8002026:	4b7b      	ldr	r3, [pc, #492]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7a      	ldr	r2, [pc, #488]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b78      	ldr	r3, [pc, #480]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a77      	ldr	r2, [pc, #476]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0xbc>
 800204a:	4b72      	ldr	r3, [pc, #456]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a71      	ldr	r2, [pc, #452]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6f      	ldr	r3, [pc, #444]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002064:	4b6b      	ldr	r3, [pc, #428]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6a      	ldr	r2, [pc, #424]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a67      	ldr	r2, [pc, #412]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ff08 	bl	8000e98 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7fe ff04 	bl	8000e98 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e200      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xe4>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fef4 	bl	8000e98 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe fef0 	bl	8000e98 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1ec      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x10c>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d063      	beq.n	80021aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ee:	4b49      	ldr	r3, [pc, #292]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
 80020fa:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1c0      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4939      	ldr	r1, [pc, #228]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e03a      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fea9 	bl	8000e98 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe fea5 	bl	8000e98 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1a1      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	4b2d      	ldr	r3, [pc, #180]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4927      	ldr	r1, [pc, #156]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fe88 	bl	8000e98 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7fe fe84 	bl	8000e98 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e180      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03a      	beq.n	800222c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d019      	beq.n	80021f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <HAL_RCC_OscConfig+0x274>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7fe fe68 	bl	8000e98 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe fe64 	bl	8000e98 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e160      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 fa9c 	bl	8002728 <RCC_Delay>
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_RCC_OscConfig+0x274>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fe4e 	bl	8000e98 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fe:	e00f      	b.n	8002220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe fe4a 	bl	8000e98 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d908      	bls.n	8002220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e146      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	42420000 	.word	0x42420000
 800221c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b92      	ldr	r3, [pc, #584]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e9      	bne.n	8002200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a6 	beq.w	8002386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b8b      	ldr	r3, [pc, #556]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b88      	ldr	r3, [pc, #544]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a87      	ldr	r2, [pc, #540]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b82      	ldr	r3, [pc, #520]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b7f      	ldr	r3, [pc, #508]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7e      	ldr	r2, [pc, #504]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7fe fe0b 	bl	8000e98 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fe07 	bl	8000e98 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	@ 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e103      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b75      	ldr	r3, [pc, #468]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x312>
 80022ac:	4b6f      	ldr	r3, [pc, #444]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a6e      	ldr	r2, [pc, #440]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e02d      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x334>
 80022c2:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a69      	ldr	r2, [pc, #420]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b67      	ldr	r3, [pc, #412]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a66      	ldr	r2, [pc, #408]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	e01c      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x356>
 80022e4:	4b61      	ldr	r3, [pc, #388]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a60      	ldr	r2, [pc, #384]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	4b5e      	ldr	r3, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a5d      	ldr	r2, [pc, #372]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	e00b      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022fe:	4b5b      	ldr	r3, [pc, #364]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a5a      	ldr	r2, [pc, #360]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4b58      	ldr	r3, [pc, #352]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a57      	ldr	r2, [pc, #348]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d015      	beq.n	800234a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7fe fdbb 	bl	8000e98 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fdb7 	bl	8000e98 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0b1      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ee      	beq.n	8002326 <HAL_RCC_OscConfig+0x37e>
 8002348:	e014      	b.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7fe fda5 	bl	8000e98 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fda1 	bl	8000e98 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e09b      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ee      	bne.n	8002352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237a:	4b3c      	ldr	r3, [pc, #240]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a3b      	ldr	r2, [pc, #236]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8087 	beq.w	800249e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d061      	beq.n	8002460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d146      	bne.n	8002432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b33      	ldr	r3, [pc, #204]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fd75 	bl	8000e98 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fd71 	bl	8000e98 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e06d      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c4:	4b29      	ldr	r3, [pc, #164]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4921      	ldr	r1, [pc, #132]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a19      	ldr	r1, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	430b      	orrs	r3, r1
 80023fe:	491b      	ldr	r1, [pc, #108]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fd45 	bl	8000e98 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fd41 	bl	8000e98 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e03d      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x46a>
 8002430:	e035      	b.n	800249e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fd2e 	bl	8000e98 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fd2a 	bl	8000e98 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e026      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x498>
 800245e:	e01e      	b.n	800249e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e019      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_RCC_OscConfig+0x500>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	429a      	cmp	r2, r3
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d0      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b67      	ldr	r3, [pc, #412]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4965      	ldr	r1, [pc, #404]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002512:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800252a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d040      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d115      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e073      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3d      	ldr	r3, [pc, #244]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06b      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4936      	ldr	r1, [pc, #216]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe fc7c 	bl	8000e98 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7fe fc78 	bl	8000e98 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e053      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d210      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b24      	ldr	r3, [pc, #144]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4922      	ldr	r1, [pc, #136]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f821 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <HAL_RCC_ClockConfig+0x1cc>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1d0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fbda 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
 8002674:	08004244 	.word	0x08004244
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x94>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d002      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x30>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ae:	e027      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x98>)
 80026b2:	613b      	str	r3, [r7, #16]
      break;
 80026b4:	e027      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a17      	ldr	r2, [pc, #92]	@ (800271c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d010      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0c5b      	lsrs	r3, r3, #17
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x98>)
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e004      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	613b      	str	r3, [r7, #16]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	613b      	str	r3, [r7, #16]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	693b      	ldr	r3, [r7, #16]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	007a1200 	.word	0x007a1200
 800271c:	08004254 	.word	0x08004254
 8002720:	08004264 	.word	0x08004264
 8002724:	003d0900 	.word	0x003d0900

08002728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <RCC_Delay+0x34>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <RCC_Delay+0x38>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0a5b      	lsrs	r3, r3, #9
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002744:	bf00      	nop
  }
  while (Delay --);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	60fa      	str	r2, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f9      	bne.n	8002744 <RCC_Delay+0x1c>
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	20000000 	.word	0x20000000
 8002760:	10624dd3 	.word	0x10624dd3

08002764 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d07d      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002780:	2300      	movs	r3, #0
 8002782:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002784:	4b4f      	ldr	r3, [pc, #316]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b4c      	ldr	r3, [pc, #304]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4a4b      	ldr	r2, [pc, #300]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279a:	61d3      	str	r3, [r2, #28]
 800279c:	4b49      	ldr	r3, [pc, #292]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b46      	ldr	r3, [pc, #280]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d118      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b8:	4b43      	ldr	r3, [pc, #268]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a42      	ldr	r2, [pc, #264]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fb68 	bl	8000e98 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	e008      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe fb64 	bl	8000e98 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e06d      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b3a      	ldr	r3, [pc, #232]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d02e      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d027      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002808:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002810:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002812:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002818:	4b2c      	ldr	r3, [pc, #176]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800281e:	4a29      	ldr	r2, [pc, #164]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d014      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fb33 	bl	8000e98 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fb2f 	bl	8000e98 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e036      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ee      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4917      	ldr	r1, [pc, #92]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	4313      	orrs	r3, r2
 8002868:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	490b      	ldr	r1, [pc, #44]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4904      	ldr	r1, [pc, #16]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420440 	.word	0x42420440

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e041      	b.n	8002966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f968 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 fc5a 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e032      	b.n	80029ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a18      	ldr	r2, [pc, #96]	@ (80029f8 <HAL_TIM_Base_Start+0x88>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00e      	beq.n	80029b8 <HAL_TIM_Base_Start+0x48>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a2:	d009      	beq.n	80029b8 <HAL_TIM_Base_Start+0x48>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <HAL_TIM_Base_Start+0x8c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_Base_Start+0x48>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	@ (8002a00 <HAL_TIM_Base_Start+0x90>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d010      	beq.n	80029ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	e007      	b.n	80029ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800

08002a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e03a      	b.n	8002a92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a18      	ldr	r2, [pc, #96]	@ (8002a9c <HAL_TIM_Base_Start_IT+0x98>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x58>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a46:	d009      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x58>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x58>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d010      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f85e 	bl	8000b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fb6e 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_TIM_PWM_Start+0x24>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e022      	b.n	8002bb2 <HAL_TIM_PWM_Start+0x6a>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d109      	bne.n	8002b86 <HAL_TIM_PWM_Start+0x3e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e015      	b.n	8002bb2 <HAL_TIM_PWM_Start+0x6a>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d109      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x58>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e008      	b.n	8002bb2 <HAL_TIM_PWM_Start+0x6a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e05e      	b.n	8002c78 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_TIM_PWM_Start+0x82>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc8:	e013      	b.n	8002bf2 <HAL_TIM_PWM_Start+0xaa>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_PWM_Start+0x92>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bd8:	e00b      	b.n	8002bf2 <HAL_TIM_PWM_Start+0xaa>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_PWM_Start+0xa2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be8:	e003      	b.n	8002bf2 <HAL_TIM_PWM_Start+0xaa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	6839      	ldr	r1, [r7, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd70 	bl	80036e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	@ (8002c80 <HAL_TIM_PWM_Start+0x138>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <HAL_TIM_PWM_Start+0x138>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <HAL_TIM_PWM_Start+0xfa>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2c:	d009      	beq.n	8002c42 <HAL_TIM_PWM_Start+0xfa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <HAL_TIM_PWM_Start+0x13c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_TIM_PWM_Start+0xfa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <HAL_TIM_PWM_Start+0x140>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d111      	bne.n	8002c66 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d010      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c64:	e007      	b.n	8002c76 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800

08002c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0202 	mvn.w	r2, #2
 8002cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa5a 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa4d 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa5c 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0204 	mvn.w	r2, #4
 8002d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa34 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa27 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fa36 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d020      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0208 	mvn.w	r2, #8
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa0e 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa01 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa10 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d020      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0210 	mvn.w	r2, #16
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2208      	movs	r2, #8
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9e8 	bl	8003190 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f9db 	bl	800317e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9ea 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fe1e 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fd3e 	bl	8003898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9ba 	bl	80031b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0220 	mvn.w	r2, #32
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fd11 	bl	8003886 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0ae      	b.n	8002fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	f200 809f 	bhi.w	8002fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002fd9 	.word	0x08002fd9
 8002ea8:	08002fd9 	.word	0x08002fd9
 8002eac:	08002fd9 	.word	0x08002fd9
 8002eb0:	08002f15 	.word	0x08002f15
 8002eb4:	08002fd9 	.word	0x08002fd9
 8002eb8:	08002fd9 	.word	0x08002fd9
 8002ebc:	08002fd9 	.word	0x08002fd9
 8002ec0:	08002f57 	.word	0x08002f57
 8002ec4:	08002fd9 	.word	0x08002fd9
 8002ec8:	08002fd9 	.word	0x08002fd9
 8002ecc:	08002fd9 	.word	0x08002fd9
 8002ed0:	08002f97 	.word	0x08002f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f9e2 	bl	80032a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6999      	ldr	r1, [r3, #24]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	619a      	str	r2, [r3, #24]
      break;
 8002f12:	e064      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fa28 	bl	8003370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]
      break;
 8002f54:	e043      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa71 	bl	8003444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0208 	orr.w	r2, r2, #8
 8002f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0204 	bic.w	r2, r2, #4
 8002f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69d9      	ldr	r1, [r3, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
      break;
 8002f94:	e023      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fabb 	bl	8003518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
      break;
 8002fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIM_ConfigClockSource+0x1c>
 8003008:	2302      	movs	r3, #2
 800300a:	e0b4      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x186>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800302a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003044:	d03e      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800304a:	f200 8087 	bhi.w	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003052:	f000 8086 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x172>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305a:	d87f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b70      	cmp	r3, #112	@ 0x70
 800305e:	d01a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xa6>
 8003060:	2b70      	cmp	r3, #112	@ 0x70
 8003062:	d87b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b60      	cmp	r3, #96	@ 0x60
 8003066:	d050      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x11a>
 8003068:	2b60      	cmp	r3, #96	@ 0x60
 800306a:	d877      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b50      	cmp	r3, #80	@ 0x50
 800306e:	d03c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0xfa>
 8003070:	2b50      	cmp	r3, #80	@ 0x50
 8003072:	d873      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b40      	cmp	r3, #64	@ 0x40
 8003076:	d058      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x13a>
 8003078:	2b40      	cmp	r3, #64	@ 0x40
 800307a:	d86f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b30      	cmp	r3, #48	@ 0x30
 800307e:	d064      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b30      	cmp	r3, #48	@ 0x30
 8003082:	d86b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b20      	cmp	r3, #32
 8003086:	d060      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	2b20      	cmp	r3, #32
 800308a:	d867      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05c      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003090:	2b10      	cmp	r3, #16
 8003092:	d05a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	e062      	b.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a6:	f000 fafc 	bl	80036a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
      break;
 80030c2:	e04f      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030d4:	f000 fae5 	bl	80036a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030e6:	609a      	str	r2, [r3, #8]
      break;
 80030e8:	e03c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fa5c 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2150      	movs	r1, #80	@ 0x50
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fab3 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003108:	e02c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	461a      	mov	r2, r3
 8003118:	f000 fa7a 	bl	8003610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2160      	movs	r1, #96	@ 0x60
 8003122:	4618      	mov	r0, r3
 8003124:	f000 faa3 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003128:	e01c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	461a      	mov	r2, r3
 8003138:	f000 fa3c 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	@ 0x40
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fa93 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8003148:	e00c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f000 fa8a 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 800315a:	e003      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e000      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
	...

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <TIM_Base_SetConfig+0xd0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00b      	beq.n	80031f8 <TIM_Base_SetConfig+0x30>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e6:	d007      	beq.n	80031f8 <TIM_Base_SetConfig+0x30>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2c      	ldr	r2, [pc, #176]	@ (800329c <TIM_Base_SetConfig+0xd4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <TIM_Base_SetConfig+0x30>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a2b      	ldr	r2, [pc, #172]	@ (80032a0 <TIM_Base_SetConfig+0xd8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d108      	bne.n	800320a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <TIM_Base_SetConfig+0xd0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1f      	ldr	r2, [pc, #124]	@ (800329c <TIM_Base_SetConfig+0xd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <TIM_Base_SetConfig+0xd8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <TIM_Base_SetConfig+0xd0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d103      	bne.n	8003270 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]
  }
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800

080032a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 0201 	bic.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 0302 	bic.w	r3, r3, #2
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <TIM_OC1_SetConfig+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10c      	bne.n	800331a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0308 	bic.w	r3, r3, #8
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a13      	ldr	r2, [pc, #76]	@ (800336c <TIM_OC1_SetConfig+0xc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00

08003370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f023 0210 	bic.w	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0320 	bic.w	r3, r3, #32
 80033ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <TIM_OC2_SetConfig+0xd0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10d      	bne.n	80033ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <TIM_OC2_SetConfig+0xd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d113      	bne.n	800341c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00

08003444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800348c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <TIM_OC3_SetConfig+0xd0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10d      	bne.n	80034be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <TIM_OC3_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d113      	bne.n	80034ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00

08003518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800354e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0f      	ldr	r2, [pc, #60]	@ (80035b0 <TIM_OC4_SetConfig+0x98>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d109      	bne.n	800358c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800357e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00

080035b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0210 	bic.w	r2, r3, #16
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	031b      	lsls	r3, r3, #12
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	f043 0307 	orr.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b087      	sub	sp, #28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	609a      	str	r2, [r3, #8]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e046      	b.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378c:	d009      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a10      	ldr	r2, [pc, #64]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10c      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800

080037e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e03d      	b.n	800387c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
	...

080038ac <siprintf>:
 80038ac:	b40e      	push	{r1, r2, r3}
 80038ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038b2:	b500      	push	{lr}
 80038b4:	b09c      	sub	sp, #112	@ 0x70
 80038b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80038b8:	9002      	str	r0, [sp, #8]
 80038ba:	9006      	str	r0, [sp, #24]
 80038bc:	9107      	str	r1, [sp, #28]
 80038be:	9104      	str	r1, [sp, #16]
 80038c0:	4808      	ldr	r0, [pc, #32]	@ (80038e4 <siprintf+0x38>)
 80038c2:	4909      	ldr	r1, [pc, #36]	@ (80038e8 <siprintf+0x3c>)
 80038c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c8:	9105      	str	r1, [sp, #20]
 80038ca:	6800      	ldr	r0, [r0, #0]
 80038cc:	a902      	add	r1, sp, #8
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	f000 f992 	bl	8003bf8 <_svfiprintf_r>
 80038d4:	2200      	movs	r2, #0
 80038d6:	9b02      	ldr	r3, [sp, #8]
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	b01c      	add	sp, #112	@ 0x70
 80038dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e0:	b003      	add	sp, #12
 80038e2:	4770      	bx	lr
 80038e4:	2000000c 	.word	0x2000000c
 80038e8:	ffff0208 	.word	0xffff0208

080038ec <memset>:
 80038ec:	4603      	mov	r3, r0
 80038ee:	4402      	add	r2, r0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d100      	bne.n	80038f6 <memset+0xa>
 80038f4:	4770      	bx	lr
 80038f6:	f803 1b01 	strb.w	r1, [r3], #1
 80038fa:	e7f9      	b.n	80038f0 <memset+0x4>

080038fc <__errno>:
 80038fc:	4b01      	ldr	r3, [pc, #4]	@ (8003904 <__errno+0x8>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	2000000c 	.word	0x2000000c

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	2600      	movs	r6, #0
 800390c:	4d0c      	ldr	r5, [pc, #48]	@ (8003940 <__libc_init_array+0x38>)
 800390e:	4c0d      	ldr	r4, [pc, #52]	@ (8003944 <__libc_init_array+0x3c>)
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	f000 fc78 	bl	800420c <_init>
 800391c:	2600      	movs	r6, #0
 800391e:	4d0a      	ldr	r5, [pc, #40]	@ (8003948 <__libc_init_array+0x40>)
 8003920:	4c0a      	ldr	r4, [pc, #40]	@ (800394c <__libc_init_array+0x44>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	0800429c 	.word	0x0800429c
 8003944:	0800429c 	.word	0x0800429c
 8003948:	0800429c 	.word	0x0800429c
 800394c:	080042a0 	.word	0x080042a0

08003950 <__retarget_lock_acquire_recursive>:
 8003950:	4770      	bx	lr

08003952 <__retarget_lock_release_recursive>:
 8003952:	4770      	bx	lr

08003954 <_free_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4605      	mov	r5, r0
 8003958:	2900      	cmp	r1, #0
 800395a:	d040      	beq.n	80039de <_free_r+0x8a>
 800395c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003960:	1f0c      	subs	r4, r1, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	bfb8      	it	lt
 8003966:	18e4      	addlt	r4, r4, r3
 8003968:	f000 f8de 	bl	8003b28 <__malloc_lock>
 800396c:	4a1c      	ldr	r2, [pc, #112]	@ (80039e0 <_free_r+0x8c>)
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	b933      	cbnz	r3, 8003980 <_free_r+0x2c>
 8003972:	6063      	str	r3, [r4, #4]
 8003974:	6014      	str	r4, [r2, #0]
 8003976:	4628      	mov	r0, r5
 8003978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800397c:	f000 b8da 	b.w	8003b34 <__malloc_unlock>
 8003980:	42a3      	cmp	r3, r4
 8003982:	d908      	bls.n	8003996 <_free_r+0x42>
 8003984:	6820      	ldr	r0, [r4, #0]
 8003986:	1821      	adds	r1, r4, r0
 8003988:	428b      	cmp	r3, r1
 800398a:	bf01      	itttt	eq
 800398c:	6819      	ldreq	r1, [r3, #0]
 800398e:	685b      	ldreq	r3, [r3, #4]
 8003990:	1809      	addeq	r1, r1, r0
 8003992:	6021      	streq	r1, [r4, #0]
 8003994:	e7ed      	b.n	8003972 <_free_r+0x1e>
 8003996:	461a      	mov	r2, r3
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	b10b      	cbz	r3, 80039a0 <_free_r+0x4c>
 800399c:	42a3      	cmp	r3, r4
 800399e:	d9fa      	bls.n	8003996 <_free_r+0x42>
 80039a0:	6811      	ldr	r1, [r2, #0]
 80039a2:	1850      	adds	r0, r2, r1
 80039a4:	42a0      	cmp	r0, r4
 80039a6:	d10b      	bne.n	80039c0 <_free_r+0x6c>
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	4401      	add	r1, r0
 80039ac:	1850      	adds	r0, r2, r1
 80039ae:	4283      	cmp	r3, r0
 80039b0:	6011      	str	r1, [r2, #0]
 80039b2:	d1e0      	bne.n	8003976 <_free_r+0x22>
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4408      	add	r0, r1
 80039ba:	6010      	str	r0, [r2, #0]
 80039bc:	6053      	str	r3, [r2, #4]
 80039be:	e7da      	b.n	8003976 <_free_r+0x22>
 80039c0:	d902      	bls.n	80039c8 <_free_r+0x74>
 80039c2:	230c      	movs	r3, #12
 80039c4:	602b      	str	r3, [r5, #0]
 80039c6:	e7d6      	b.n	8003976 <_free_r+0x22>
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	1821      	adds	r1, r4, r0
 80039cc:	428b      	cmp	r3, r1
 80039ce:	bf01      	itttt	eq
 80039d0:	6819      	ldreq	r1, [r3, #0]
 80039d2:	685b      	ldreq	r3, [r3, #4]
 80039d4:	1809      	addeq	r1, r1, r0
 80039d6:	6021      	streq	r1, [r4, #0]
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	6054      	str	r4, [r2, #4]
 80039dc:	e7cb      	b.n	8003976 <_free_r+0x22>
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	20000330 	.word	0x20000330

080039e4 <sbrk_aligned>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a24 <sbrk_aligned+0x40>)
 80039e8:	460c      	mov	r4, r1
 80039ea:	6831      	ldr	r1, [r6, #0]
 80039ec:	4605      	mov	r5, r0
 80039ee:	b911      	cbnz	r1, 80039f6 <sbrk_aligned+0x12>
 80039f0:	f000 fbaa 	bl	8004148 <_sbrk_r>
 80039f4:	6030      	str	r0, [r6, #0]
 80039f6:	4621      	mov	r1, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 fba5 	bl	8004148 <_sbrk_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d103      	bne.n	8003a0a <sbrk_aligned+0x26>
 8003a02:	f04f 34ff 	mov.w	r4, #4294967295
 8003a06:	4620      	mov	r0, r4
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	1cc4      	adds	r4, r0, #3
 8003a0c:	f024 0403 	bic.w	r4, r4, #3
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d0f8      	beq.n	8003a06 <sbrk_aligned+0x22>
 8003a14:	1a21      	subs	r1, r4, r0
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 fb96 	bl	8004148 <_sbrk_r>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d1f2      	bne.n	8003a06 <sbrk_aligned+0x22>
 8003a20:	e7ef      	b.n	8003a02 <sbrk_aligned+0x1e>
 8003a22:	bf00      	nop
 8003a24:	2000032c 	.word	0x2000032c

08003a28 <_malloc_r>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	1ccd      	adds	r5, r1, #3
 8003a2e:	f025 0503 	bic.w	r5, r5, #3
 8003a32:	3508      	adds	r5, #8
 8003a34:	2d0c      	cmp	r5, #12
 8003a36:	bf38      	it	cc
 8003a38:	250c      	movcc	r5, #12
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	db01      	blt.n	8003a44 <_malloc_r+0x1c>
 8003a40:	42a9      	cmp	r1, r5
 8003a42:	d904      	bls.n	8003a4e <_malloc_r+0x26>
 8003a44:	230c      	movs	r3, #12
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	2000      	movs	r0, #0
 8003a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b24 <_malloc_r+0xfc>
 8003a52:	f000 f869 	bl	8003b28 <__malloc_lock>
 8003a56:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	bb44      	cbnz	r4, 8003ab0 <_malloc_r+0x88>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff ffbf 	bl	80039e4 <sbrk_aligned>
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	4604      	mov	r4, r0
 8003a6a:	d158      	bne.n	8003b1e <_malloc_r+0xf6>
 8003a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a70:	4627      	mov	r7, r4
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	d143      	bne.n	8003afe <_malloc_r+0xd6>
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	d04b      	beq.n	8003b12 <_malloc_r+0xea>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	4630      	mov	r0, r6
 8003a80:	eb04 0903 	add.w	r9, r4, r3
 8003a84:	f000 fb60 	bl	8004148 <_sbrk_r>
 8003a88:	4581      	cmp	r9, r0
 8003a8a:	d142      	bne.n	8003b12 <_malloc_r+0xea>
 8003a8c:	6821      	ldr	r1, [r4, #0]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	1a6d      	subs	r5, r5, r1
 8003a92:	4629      	mov	r1, r5
 8003a94:	f7ff ffa6 	bl	80039e4 <sbrk_aligned>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d03a      	beq.n	8003b12 <_malloc_r+0xea>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	442b      	add	r3, r5
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	bb62      	cbnz	r2, 8003b04 <_malloc_r+0xdc>
 8003aaa:	f8c8 7000 	str.w	r7, [r8]
 8003aae:	e00f      	b.n	8003ad0 <_malloc_r+0xa8>
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	1b52      	subs	r2, r2, r5
 8003ab4:	d420      	bmi.n	8003af8 <_malloc_r+0xd0>
 8003ab6:	2a0b      	cmp	r2, #11
 8003ab8:	d917      	bls.n	8003aea <_malloc_r+0xc2>
 8003aba:	1961      	adds	r1, r4, r5
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	6025      	str	r5, [r4, #0]
 8003ac0:	bf18      	it	ne
 8003ac2:	6059      	strne	r1, [r3, #4]
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	bf08      	it	eq
 8003ac8:	f8c8 1000 	streq.w	r1, [r8]
 8003acc:	5162      	str	r2, [r4, r5]
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f000 f82f 	bl	8003b34 <__malloc_unlock>
 8003ad6:	f104 000b 	add.w	r0, r4, #11
 8003ada:	1d23      	adds	r3, r4, #4
 8003adc:	f020 0007 	bic.w	r0, r0, #7
 8003ae0:	1ac2      	subs	r2, r0, r3
 8003ae2:	bf1c      	itt	ne
 8003ae4:	1a1b      	subne	r3, r3, r0
 8003ae6:	50a3      	strne	r3, [r4, r2]
 8003ae8:	e7af      	b.n	8003a4a <_malloc_r+0x22>
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	bf0c      	ite	eq
 8003af0:	f8c8 2000 	streq.w	r2, [r8]
 8003af4:	605a      	strne	r2, [r3, #4]
 8003af6:	e7eb      	b.n	8003ad0 <_malloc_r+0xa8>
 8003af8:	4623      	mov	r3, r4
 8003afa:	6864      	ldr	r4, [r4, #4]
 8003afc:	e7ae      	b.n	8003a5c <_malloc_r+0x34>
 8003afe:	463c      	mov	r4, r7
 8003b00:	687f      	ldr	r7, [r7, #4]
 8003b02:	e7b6      	b.n	8003a72 <_malloc_r+0x4a>
 8003b04:	461a      	mov	r2, r3
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d1fb      	bne.n	8003b04 <_malloc_r+0xdc>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6053      	str	r3, [r2, #4]
 8003b10:	e7de      	b.n	8003ad0 <_malloc_r+0xa8>
 8003b12:	230c      	movs	r3, #12
 8003b14:	4630      	mov	r0, r6
 8003b16:	6033      	str	r3, [r6, #0]
 8003b18:	f000 f80c 	bl	8003b34 <__malloc_unlock>
 8003b1c:	e794      	b.n	8003a48 <_malloc_r+0x20>
 8003b1e:	6005      	str	r5, [r0, #0]
 8003b20:	e7d6      	b.n	8003ad0 <_malloc_r+0xa8>
 8003b22:	bf00      	nop
 8003b24:	20000330 	.word	0x20000330

08003b28 <__malloc_lock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	@ (8003b30 <__malloc_lock+0x8>)
 8003b2a:	f7ff bf11 	b.w	8003950 <__retarget_lock_acquire_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000328 	.word	0x20000328

08003b34 <__malloc_unlock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__malloc_unlock+0x8>)
 8003b36:	f7ff bf0c 	b.w	8003952 <__retarget_lock_release_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000328 	.word	0x20000328

08003b40 <__ssputs_r>:
 8003b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b44:	461f      	mov	r7, r3
 8003b46:	688e      	ldr	r6, [r1, #8]
 8003b48:	4682      	mov	sl, r0
 8003b4a:	42be      	cmp	r6, r7
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	4690      	mov	r8, r2
 8003b50:	680b      	ldr	r3, [r1, #0]
 8003b52:	d82d      	bhi.n	8003bb0 <__ssputs_r+0x70>
 8003b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b5c:	d026      	beq.n	8003bac <__ssputs_r+0x6c>
 8003b5e:	6965      	ldr	r5, [r4, #20]
 8003b60:	6909      	ldr	r1, [r1, #16]
 8003b62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b66:	eba3 0901 	sub.w	r9, r3, r1
 8003b6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b6e:	1c7b      	adds	r3, r7, #1
 8003b70:	444b      	add	r3, r9
 8003b72:	106d      	asrs	r5, r5, #1
 8003b74:	429d      	cmp	r5, r3
 8003b76:	bf38      	it	cc
 8003b78:	461d      	movcc	r5, r3
 8003b7a:	0553      	lsls	r3, r2, #21
 8003b7c:	d527      	bpl.n	8003bce <__ssputs_r+0x8e>
 8003b7e:	4629      	mov	r1, r5
 8003b80:	f7ff ff52 	bl	8003a28 <_malloc_r>
 8003b84:	4606      	mov	r6, r0
 8003b86:	b360      	cbz	r0, 8003be2 <__ssputs_r+0xa2>
 8003b88:	464a      	mov	r2, r9
 8003b8a:	6921      	ldr	r1, [r4, #16]
 8003b8c:	f000 fafa 	bl	8004184 <memcpy>
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	6126      	str	r6, [r4, #16]
 8003b9e:	444e      	add	r6, r9
 8003ba0:	6026      	str	r6, [r4, #0]
 8003ba2:	463e      	mov	r6, r7
 8003ba4:	6165      	str	r5, [r4, #20]
 8003ba6:	eba5 0509 	sub.w	r5, r5, r9
 8003baa:	60a5      	str	r5, [r4, #8]
 8003bac:	42be      	cmp	r6, r7
 8003bae:	d900      	bls.n	8003bb2 <__ssputs_r+0x72>
 8003bb0:	463e      	mov	r6, r7
 8003bb2:	4632      	mov	r2, r6
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	f000 faac 	bl	8004114 <memmove>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	68a3      	ldr	r3, [r4, #8]
 8003bc0:	1b9b      	subs	r3, r3, r6
 8003bc2:	60a3      	str	r3, [r4, #8]
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	4433      	add	r3, r6
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bce:	462a      	mov	r2, r5
 8003bd0:	f000 fae6 	bl	80041a0 <_realloc_r>
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d1e0      	bne.n	8003b9c <__ssputs_r+0x5c>
 8003bda:	4650      	mov	r0, sl
 8003bdc:	6921      	ldr	r1, [r4, #16]
 8003bde:	f7ff feb9 	bl	8003954 <_free_r>
 8003be2:	230c      	movs	r3, #12
 8003be4:	f8ca 3000 	str.w	r3, [sl]
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f04f 30ff 	mov.w	r0, #4294967295
 8003bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	e7e9      	b.n	8003bca <__ssputs_r+0x8a>
	...

08003bf8 <_svfiprintf_r>:
 8003bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfc:	4698      	mov	r8, r3
 8003bfe:	898b      	ldrh	r3, [r1, #12]
 8003c00:	4607      	mov	r7, r0
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	460d      	mov	r5, r1
 8003c06:	4614      	mov	r4, r2
 8003c08:	b09d      	sub	sp, #116	@ 0x74
 8003c0a:	d510      	bpl.n	8003c2e <_svfiprintf_r+0x36>
 8003c0c:	690b      	ldr	r3, [r1, #16]
 8003c0e:	b973      	cbnz	r3, 8003c2e <_svfiprintf_r+0x36>
 8003c10:	2140      	movs	r1, #64	@ 0x40
 8003c12:	f7ff ff09 	bl	8003a28 <_malloc_r>
 8003c16:	6028      	str	r0, [r5, #0]
 8003c18:	6128      	str	r0, [r5, #16]
 8003c1a:	b930      	cbnz	r0, 8003c2a <_svfiprintf_r+0x32>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	b01d      	add	sp, #116	@ 0x74
 8003c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2a:	2340      	movs	r3, #64	@ 0x40
 8003c2c:	616b      	str	r3, [r5, #20]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c32:	2320      	movs	r3, #32
 8003c34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c38:	2330      	movs	r3, #48	@ 0x30
 8003c3a:	f04f 0901 	mov.w	r9, #1
 8003c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003ddc <_svfiprintf_r+0x1e4>
 8003c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	469a      	mov	sl, r3
 8003c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c52:	b10a      	cbz	r2, 8003c58 <_svfiprintf_r+0x60>
 8003c54:	2a25      	cmp	r2, #37	@ 0x25
 8003c56:	d1f9      	bne.n	8003c4c <_svfiprintf_r+0x54>
 8003c58:	ebba 0b04 	subs.w	fp, sl, r4
 8003c5c:	d00b      	beq.n	8003c76 <_svfiprintf_r+0x7e>
 8003c5e:	465b      	mov	r3, fp
 8003c60:	4622      	mov	r2, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7ff ff6b 	bl	8003b40 <__ssputs_r>
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f000 80a7 	beq.w	8003dbe <_svfiprintf_r+0x1c6>
 8003c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c72:	445a      	add	r2, fp
 8003c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c76:	f89a 3000 	ldrb.w	r3, [sl]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 809f 	beq.w	8003dbe <_svfiprintf_r+0x1c6>
 8003c80:	2300      	movs	r3, #0
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
 8003c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c8a:	f10a 0a01 	add.w	sl, sl, #1
 8003c8e:	9304      	str	r3, [sp, #16]
 8003c90:	9307      	str	r3, [sp, #28]
 8003c92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c96:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c98:	4654      	mov	r4, sl
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca0:	484e      	ldr	r0, [pc, #312]	@ (8003ddc <_svfiprintf_r+0x1e4>)
 8003ca2:	f000 fa61 	bl	8004168 <memchr>
 8003ca6:	9a04      	ldr	r2, [sp, #16]
 8003ca8:	b9d8      	cbnz	r0, 8003ce2 <_svfiprintf_r+0xea>
 8003caa:	06d0      	lsls	r0, r2, #27
 8003cac:	bf44      	itt	mi
 8003cae:	2320      	movmi	r3, #32
 8003cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cb4:	0711      	lsls	r1, r2, #28
 8003cb6:	bf44      	itt	mi
 8003cb8:	232b      	movmi	r3, #43	@ 0x2b
 8003cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc4:	d015      	beq.n	8003cf2 <_svfiprintf_r+0xfa>
 8003cc6:	4654      	mov	r4, sl
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f04f 0c0a 	mov.w	ip, #10
 8003cce:	9a07      	ldr	r2, [sp, #28]
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd6:	3b30      	subs	r3, #48	@ 0x30
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d94b      	bls.n	8003d74 <_svfiprintf_r+0x17c>
 8003cdc:	b1b0      	cbz	r0, 8003d0c <_svfiprintf_r+0x114>
 8003cde:	9207      	str	r2, [sp, #28]
 8003ce0:	e014      	b.n	8003d0c <_svfiprintf_r+0x114>
 8003ce2:	eba0 0308 	sub.w	r3, r0, r8
 8003ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cea:	4313      	orrs	r3, r2
 8003cec:	46a2      	mov	sl, r4
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	e7d2      	b.n	8003c98 <_svfiprintf_r+0xa0>
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	9103      	str	r1, [sp, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bfbb      	ittet	lt
 8003cfe:	425b      	neglt	r3, r3
 8003d00:	f042 0202 	orrlt.w	r2, r2, #2
 8003d04:	9307      	strge	r3, [sp, #28]
 8003d06:	9307      	strlt	r3, [sp, #28]
 8003d08:	bfb8      	it	lt
 8003d0a:	9204      	strlt	r2, [sp, #16]
 8003d0c:	7823      	ldrb	r3, [r4, #0]
 8003d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d10:	d10a      	bne.n	8003d28 <_svfiprintf_r+0x130>
 8003d12:	7863      	ldrb	r3, [r4, #1]
 8003d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d16:	d132      	bne.n	8003d7e <_svfiprintf_r+0x186>
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	3402      	adds	r4, #2
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	9203      	str	r2, [sp, #12]
 8003d22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d26:	9305      	str	r3, [sp, #20]
 8003d28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003de0 <_svfiprintf_r+0x1e8>
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4650      	mov	r0, sl
 8003d30:	7821      	ldrb	r1, [r4, #0]
 8003d32:	f000 fa19 	bl	8004168 <memchr>
 8003d36:	b138      	cbz	r0, 8003d48 <_svfiprintf_r+0x150>
 8003d38:	2240      	movs	r2, #64	@ 0x40
 8003d3a:	9b04      	ldr	r3, [sp, #16]
 8003d3c:	eba0 000a 	sub.w	r0, r0, sl
 8003d40:	4082      	lsls	r2, r0
 8003d42:	4313      	orrs	r3, r2
 8003d44:	3401      	adds	r4, #1
 8003d46:	9304      	str	r3, [sp, #16]
 8003d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	4825      	ldr	r0, [pc, #148]	@ (8003de4 <_svfiprintf_r+0x1ec>)
 8003d50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d54:	f000 fa08 	bl	8004168 <memchr>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d036      	beq.n	8003dca <_svfiprintf_r+0x1d2>
 8003d5c:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <_svfiprintf_r+0x1f0>)
 8003d5e:	bb1b      	cbnz	r3, 8003da8 <_svfiprintf_r+0x1b0>
 8003d60:	9b03      	ldr	r3, [sp, #12]
 8003d62:	3307      	adds	r3, #7
 8003d64:	f023 0307 	bic.w	r3, r3, #7
 8003d68:	3308      	adds	r3, #8
 8003d6a:	9303      	str	r3, [sp, #12]
 8003d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d6e:	4433      	add	r3, r6
 8003d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d72:	e76a      	b.n	8003c4a <_svfiprintf_r+0x52>
 8003d74:	460c      	mov	r4, r1
 8003d76:	2001      	movs	r0, #1
 8003d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7c:	e7a8      	b.n	8003cd0 <_svfiprintf_r+0xd8>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f04f 0c0a 	mov.w	ip, #10
 8003d84:	4619      	mov	r1, r3
 8003d86:	3401      	adds	r4, #1
 8003d88:	9305      	str	r3, [sp, #20]
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d90:	3a30      	subs	r2, #48	@ 0x30
 8003d92:	2a09      	cmp	r2, #9
 8003d94:	d903      	bls.n	8003d9e <_svfiprintf_r+0x1a6>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0c6      	beq.n	8003d28 <_svfiprintf_r+0x130>
 8003d9a:	9105      	str	r1, [sp, #20]
 8003d9c:	e7c4      	b.n	8003d28 <_svfiprintf_r+0x130>
 8003d9e:	4604      	mov	r4, r0
 8003da0:	2301      	movs	r3, #1
 8003da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da6:	e7f0      	b.n	8003d8a <_svfiprintf_r+0x192>
 8003da8:	ab03      	add	r3, sp, #12
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	462a      	mov	r2, r5
 8003dae:	4638      	mov	r0, r7
 8003db0:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <_svfiprintf_r+0x1f4>)
 8003db2:	a904      	add	r1, sp, #16
 8003db4:	f3af 8000 	nop.w
 8003db8:	1c42      	adds	r2, r0, #1
 8003dba:	4606      	mov	r6, r0
 8003dbc:	d1d6      	bne.n	8003d6c <_svfiprintf_r+0x174>
 8003dbe:	89ab      	ldrh	r3, [r5, #12]
 8003dc0:	065b      	lsls	r3, r3, #25
 8003dc2:	f53f af2d 	bmi.w	8003c20 <_svfiprintf_r+0x28>
 8003dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dc8:	e72c      	b.n	8003c24 <_svfiprintf_r+0x2c>
 8003dca:	ab03      	add	r3, sp, #12
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	462a      	mov	r2, r5
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <_svfiprintf_r+0x1f4>)
 8003dd4:	a904      	add	r1, sp, #16
 8003dd6:	f000 f87d 	bl	8003ed4 <_printf_i>
 8003dda:	e7ed      	b.n	8003db8 <_svfiprintf_r+0x1c0>
 8003ddc:	08004266 	.word	0x08004266
 8003de0:	0800426c 	.word	0x0800426c
 8003de4:	08004270 	.word	0x08004270
 8003de8:	00000000 	.word	0x00000000
 8003dec:	08003b41 	.word	0x08003b41

08003df0 <_printf_common>:
 8003df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	4616      	mov	r6, r2
 8003df6:	4698      	mov	r8, r3
 8003df8:	688a      	ldr	r2, [r1, #8]
 8003dfa:	690b      	ldr	r3, [r1, #16]
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	bfb8      	it	lt
 8003e02:	4613      	movlt	r3, r2
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e10:	b10a      	cbz	r2, 8003e16 <_printf_common+0x26>
 8003e12:	3301      	adds	r3, #1
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	0699      	lsls	r1, r3, #26
 8003e1a:	bf42      	ittt	mi
 8003e1c:	6833      	ldrmi	r3, [r6, #0]
 8003e1e:	3302      	addmi	r3, #2
 8003e20:	6033      	strmi	r3, [r6, #0]
 8003e22:	6825      	ldr	r5, [r4, #0]
 8003e24:	f015 0506 	ands.w	r5, r5, #6
 8003e28:	d106      	bne.n	8003e38 <_printf_common+0x48>
 8003e2a:	f104 0a19 	add.w	sl, r4, #25
 8003e2e:	68e3      	ldr	r3, [r4, #12]
 8003e30:	6832      	ldr	r2, [r6, #0]
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	42ab      	cmp	r3, r5
 8003e36:	dc2b      	bgt.n	8003e90 <_printf_common+0xa0>
 8003e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e3c:	6822      	ldr	r2, [r4, #0]
 8003e3e:	3b00      	subs	r3, #0
 8003e40:	bf18      	it	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	0692      	lsls	r2, r2, #26
 8003e46:	d430      	bmi.n	8003eaa <_printf_common+0xba>
 8003e48:	4641      	mov	r1, r8
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e50:	47c8      	blx	r9
 8003e52:	3001      	adds	r0, #1
 8003e54:	d023      	beq.n	8003e9e <_printf_common+0xae>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	6922      	ldr	r2, [r4, #16]
 8003e5a:	f003 0306 	and.w	r3, r3, #6
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	bf14      	ite	ne
 8003e62:	2500      	movne	r5, #0
 8003e64:	6833      	ldreq	r3, [r6, #0]
 8003e66:	f04f 0600 	mov.w	r6, #0
 8003e6a:	bf08      	it	eq
 8003e6c:	68e5      	ldreq	r5, [r4, #12]
 8003e6e:	f104 041a 	add.w	r4, r4, #26
 8003e72:	bf08      	it	eq
 8003e74:	1aed      	subeq	r5, r5, r3
 8003e76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e7a:	bf08      	it	eq
 8003e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bfc4      	itt	gt
 8003e84:	1a9b      	subgt	r3, r3, r2
 8003e86:	18ed      	addgt	r5, r5, r3
 8003e88:	42b5      	cmp	r5, r6
 8003e8a:	d11a      	bne.n	8003ec2 <_printf_common+0xd2>
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e008      	b.n	8003ea2 <_printf_common+0xb2>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4652      	mov	r2, sl
 8003e94:	4641      	mov	r1, r8
 8003e96:	4638      	mov	r0, r7
 8003e98:	47c8      	blx	r9
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d103      	bne.n	8003ea6 <_printf_common+0xb6>
 8003e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	3501      	adds	r5, #1
 8003ea8:	e7c1      	b.n	8003e2e <_printf_common+0x3e>
 8003eaa:	2030      	movs	r0, #48	@ 0x30
 8003eac:	18e1      	adds	r1, r4, r3
 8003eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003eb8:	4422      	add	r2, r4
 8003eba:	3302      	adds	r3, #2
 8003ebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ec0:	e7c2      	b.n	8003e48 <_printf_common+0x58>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	4638      	mov	r0, r7
 8003eca:	47c8      	blx	r9
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d0e6      	beq.n	8003e9e <_printf_common+0xae>
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7d9      	b.n	8003e88 <_printf_common+0x98>

08003ed4 <_printf_i>:
 8003ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	7e0f      	ldrb	r7, [r1, #24]
 8003eda:	4691      	mov	r9, r2
 8003edc:	2f78      	cmp	r7, #120	@ 0x78
 8003ede:	4680      	mov	r8, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	469a      	mov	sl, r3
 8003ee4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eea:	d807      	bhi.n	8003efc <_printf_i+0x28>
 8003eec:	2f62      	cmp	r7, #98	@ 0x62
 8003eee:	d80a      	bhi.n	8003f06 <_printf_i+0x32>
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f000 80d3 	beq.w	800409c <_printf_i+0x1c8>
 8003ef6:	2f58      	cmp	r7, #88	@ 0x58
 8003ef8:	f000 80ba 	beq.w	8004070 <_printf_i+0x19c>
 8003efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f04:	e03a      	b.n	8003f7c <_printf_i+0xa8>
 8003f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f0a:	2b15      	cmp	r3, #21
 8003f0c:	d8f6      	bhi.n	8003efc <_printf_i+0x28>
 8003f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f14 <_printf_i+0x40>)
 8003f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f81 	.word	0x08003f81
 8003f1c:	08003efd 	.word	0x08003efd
 8003f20:	08003efd 	.word	0x08003efd
 8003f24:	08003efd 	.word	0x08003efd
 8003f28:	08003efd 	.word	0x08003efd
 8003f2c:	08003f81 	.word	0x08003f81
 8003f30:	08003efd 	.word	0x08003efd
 8003f34:	08003efd 	.word	0x08003efd
 8003f38:	08003efd 	.word	0x08003efd
 8003f3c:	08003efd 	.word	0x08003efd
 8003f40:	08004083 	.word	0x08004083
 8003f44:	08003fab 	.word	0x08003fab
 8003f48:	0800403d 	.word	0x0800403d
 8003f4c:	08003efd 	.word	0x08003efd
 8003f50:	08003efd 	.word	0x08003efd
 8003f54:	080040a5 	.word	0x080040a5
 8003f58:	08003efd 	.word	0x08003efd
 8003f5c:	08003fab 	.word	0x08003fab
 8003f60:	08003efd 	.word	0x08003efd
 8003f64:	08003efd 	.word	0x08003efd
 8003f68:	08004045 	.word	0x08004045
 8003f6c:	6833      	ldr	r3, [r6, #0]
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6032      	str	r2, [r6, #0]
 8003f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e09e      	b.n	80040be <_printf_i+0x1ea>
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	1d19      	adds	r1, r3, #4
 8003f86:	6031      	str	r1, [r6, #0]
 8003f88:	0606      	lsls	r6, r0, #24
 8003f8a:	d501      	bpl.n	8003f90 <_printf_i+0xbc>
 8003f8c:	681d      	ldr	r5, [r3, #0]
 8003f8e:	e003      	b.n	8003f98 <_printf_i+0xc4>
 8003f90:	0645      	lsls	r5, r0, #25
 8003f92:	d5fb      	bpl.n	8003f8c <_printf_i+0xb8>
 8003f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	da03      	bge.n	8003fa4 <_printf_i+0xd0>
 8003f9c:	232d      	movs	r3, #45	@ 0x2d
 8003f9e:	426d      	negs	r5, r5
 8003fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fa4:	230a      	movs	r3, #10
 8003fa6:	4859      	ldr	r0, [pc, #356]	@ (800410c <_printf_i+0x238>)
 8003fa8:	e011      	b.n	8003fce <_printf_i+0xfa>
 8003faa:	6821      	ldr	r1, [r4, #0]
 8003fac:	6833      	ldr	r3, [r6, #0]
 8003fae:	0608      	lsls	r0, r1, #24
 8003fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fb4:	d402      	bmi.n	8003fbc <_printf_i+0xe8>
 8003fb6:	0649      	lsls	r1, r1, #25
 8003fb8:	bf48      	it	mi
 8003fba:	b2ad      	uxthmi	r5, r5
 8003fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	bf14      	ite	ne
 8003fc2:	230a      	movne	r3, #10
 8003fc4:	2308      	moveq	r3, #8
 8003fc6:	4851      	ldr	r0, [pc, #324]	@ (800410c <_printf_i+0x238>)
 8003fc8:	2100      	movs	r1, #0
 8003fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fce:	6866      	ldr	r6, [r4, #4]
 8003fd0:	2e00      	cmp	r6, #0
 8003fd2:	bfa8      	it	ge
 8003fd4:	6821      	ldrge	r1, [r4, #0]
 8003fd6:	60a6      	str	r6, [r4, #8]
 8003fd8:	bfa4      	itt	ge
 8003fda:	f021 0104 	bicge.w	r1, r1, #4
 8003fde:	6021      	strge	r1, [r4, #0]
 8003fe0:	b90d      	cbnz	r5, 8003fe6 <_printf_i+0x112>
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	d04b      	beq.n	800407e <_printf_i+0x1aa>
 8003fe6:	4616      	mov	r6, r2
 8003fe8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fec:	fb03 5711 	mls	r7, r3, r1, r5
 8003ff0:	5dc7      	ldrb	r7, [r0, r7]
 8003ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ff6:	462f      	mov	r7, r5
 8003ff8:	42bb      	cmp	r3, r7
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	d9f4      	bls.n	8003fe8 <_printf_i+0x114>
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d10b      	bne.n	800401a <_printf_i+0x146>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	07df      	lsls	r7, r3, #31
 8004006:	d508      	bpl.n	800401a <_printf_i+0x146>
 8004008:	6923      	ldr	r3, [r4, #16]
 800400a:	6861      	ldr	r1, [r4, #4]
 800400c:	4299      	cmp	r1, r3
 800400e:	bfde      	ittt	le
 8004010:	2330      	movle	r3, #48	@ 0x30
 8004012:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800401a:	1b92      	subs	r2, r2, r6
 800401c:	6122      	str	r2, [r4, #16]
 800401e:	464b      	mov	r3, r9
 8004020:	4621      	mov	r1, r4
 8004022:	4640      	mov	r0, r8
 8004024:	f8cd a000 	str.w	sl, [sp]
 8004028:	aa03      	add	r2, sp, #12
 800402a:	f7ff fee1 	bl	8003df0 <_printf_common>
 800402e:	3001      	adds	r0, #1
 8004030:	d14a      	bne.n	80040c8 <_printf_i+0x1f4>
 8004032:	f04f 30ff 	mov.w	r0, #4294967295
 8004036:	b004      	add	sp, #16
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	2778      	movs	r7, #120	@ 0x78
 8004046:	4832      	ldr	r0, [pc, #200]	@ (8004110 <_printf_i+0x23c>)
 8004048:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	6831      	ldr	r1, [r6, #0]
 8004050:	061f      	lsls	r7, r3, #24
 8004052:	f851 5b04 	ldr.w	r5, [r1], #4
 8004056:	d402      	bmi.n	800405e <_printf_i+0x18a>
 8004058:	065f      	lsls	r7, r3, #25
 800405a:	bf48      	it	mi
 800405c:	b2ad      	uxthmi	r5, r5
 800405e:	6031      	str	r1, [r6, #0]
 8004060:	07d9      	lsls	r1, r3, #31
 8004062:	bf44      	itt	mi
 8004064:	f043 0320 	orrmi.w	r3, r3, #32
 8004068:	6023      	strmi	r3, [r4, #0]
 800406a:	b11d      	cbz	r5, 8004074 <_printf_i+0x1a0>
 800406c:	2310      	movs	r3, #16
 800406e:	e7ab      	b.n	8003fc8 <_printf_i+0xf4>
 8004070:	4826      	ldr	r0, [pc, #152]	@ (800410c <_printf_i+0x238>)
 8004072:	e7e9      	b.n	8004048 <_printf_i+0x174>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	f023 0320 	bic.w	r3, r3, #32
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	e7f6      	b.n	800406c <_printf_i+0x198>
 800407e:	4616      	mov	r6, r2
 8004080:	e7bd      	b.n	8003ffe <_printf_i+0x12a>
 8004082:	6833      	ldr	r3, [r6, #0]
 8004084:	6825      	ldr	r5, [r4, #0]
 8004086:	1d18      	adds	r0, r3, #4
 8004088:	6961      	ldr	r1, [r4, #20]
 800408a:	6030      	str	r0, [r6, #0]
 800408c:	062e      	lsls	r6, r5, #24
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	d501      	bpl.n	8004096 <_printf_i+0x1c2>
 8004092:	6019      	str	r1, [r3, #0]
 8004094:	e002      	b.n	800409c <_printf_i+0x1c8>
 8004096:	0668      	lsls	r0, r5, #25
 8004098:	d5fb      	bpl.n	8004092 <_printf_i+0x1be>
 800409a:	8019      	strh	r1, [r3, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	4616      	mov	r6, r2
 80040a0:	6123      	str	r3, [r4, #16]
 80040a2:	e7bc      	b.n	800401e <_printf_i+0x14a>
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	2100      	movs	r1, #0
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	6032      	str	r2, [r6, #0]
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	6862      	ldr	r2, [r4, #4]
 80040b0:	4630      	mov	r0, r6
 80040b2:	f000 f859 	bl	8004168 <memchr>
 80040b6:	b108      	cbz	r0, 80040bc <_printf_i+0x1e8>
 80040b8:	1b80      	subs	r0, r0, r6
 80040ba:	6060      	str	r0, [r4, #4]
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	6123      	str	r3, [r4, #16]
 80040c0:	2300      	movs	r3, #0
 80040c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040c6:	e7aa      	b.n	800401e <_printf_i+0x14a>
 80040c8:	4632      	mov	r2, r6
 80040ca:	4649      	mov	r1, r9
 80040cc:	4640      	mov	r0, r8
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	47d0      	blx	sl
 80040d2:	3001      	adds	r0, #1
 80040d4:	d0ad      	beq.n	8004032 <_printf_i+0x15e>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	079b      	lsls	r3, r3, #30
 80040da:	d413      	bmi.n	8004104 <_printf_i+0x230>
 80040dc:	68e0      	ldr	r0, [r4, #12]
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	4298      	cmp	r0, r3
 80040e2:	bfb8      	it	lt
 80040e4:	4618      	movlt	r0, r3
 80040e6:	e7a6      	b.n	8004036 <_printf_i+0x162>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4632      	mov	r2, r6
 80040ec:	4649      	mov	r1, r9
 80040ee:	4640      	mov	r0, r8
 80040f0:	47d0      	blx	sl
 80040f2:	3001      	adds	r0, #1
 80040f4:	d09d      	beq.n	8004032 <_printf_i+0x15e>
 80040f6:	3501      	adds	r5, #1
 80040f8:	68e3      	ldr	r3, [r4, #12]
 80040fa:	9903      	ldr	r1, [sp, #12]
 80040fc:	1a5b      	subs	r3, r3, r1
 80040fe:	42ab      	cmp	r3, r5
 8004100:	dcf2      	bgt.n	80040e8 <_printf_i+0x214>
 8004102:	e7eb      	b.n	80040dc <_printf_i+0x208>
 8004104:	2500      	movs	r5, #0
 8004106:	f104 0619 	add.w	r6, r4, #25
 800410a:	e7f5      	b.n	80040f8 <_printf_i+0x224>
 800410c:	08004277 	.word	0x08004277
 8004110:	08004288 	.word	0x08004288

08004114 <memmove>:
 8004114:	4288      	cmp	r0, r1
 8004116:	b510      	push	{r4, lr}
 8004118:	eb01 0402 	add.w	r4, r1, r2
 800411c:	d902      	bls.n	8004124 <memmove+0x10>
 800411e:	4284      	cmp	r4, r0
 8004120:	4623      	mov	r3, r4
 8004122:	d807      	bhi.n	8004134 <memmove+0x20>
 8004124:	1e43      	subs	r3, r0, #1
 8004126:	42a1      	cmp	r1, r4
 8004128:	d008      	beq.n	800413c <memmove+0x28>
 800412a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800412e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004132:	e7f8      	b.n	8004126 <memmove+0x12>
 8004134:	4601      	mov	r1, r0
 8004136:	4402      	add	r2, r0
 8004138:	428a      	cmp	r2, r1
 800413a:	d100      	bne.n	800413e <memmove+0x2a>
 800413c:	bd10      	pop	{r4, pc}
 800413e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004146:	e7f7      	b.n	8004138 <memmove+0x24>

08004148 <_sbrk_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	2300      	movs	r3, #0
 800414c:	4d05      	ldr	r5, [pc, #20]	@ (8004164 <_sbrk_r+0x1c>)
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	602b      	str	r3, [r5, #0]
 8004154:	f7fc fde6 	bl	8000d24 <_sbrk>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_sbrk_r+0x1a>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	b103      	cbz	r3, 8004162 <_sbrk_r+0x1a>
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	20000324 	.word	0x20000324

08004168 <memchr>:
 8004168:	4603      	mov	r3, r0
 800416a:	b510      	push	{r4, lr}
 800416c:	b2c9      	uxtb	r1, r1
 800416e:	4402      	add	r2, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	4618      	mov	r0, r3
 8004174:	d101      	bne.n	800417a <memchr+0x12>
 8004176:	2000      	movs	r0, #0
 8004178:	e003      	b.n	8004182 <memchr+0x1a>
 800417a:	7804      	ldrb	r4, [r0, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	428c      	cmp	r4, r1
 8004180:	d1f6      	bne.n	8004170 <memchr+0x8>
 8004182:	bd10      	pop	{r4, pc}

08004184 <memcpy>:
 8004184:	440a      	add	r2, r1
 8004186:	4291      	cmp	r1, r2
 8004188:	f100 33ff 	add.w	r3, r0, #4294967295
 800418c:	d100      	bne.n	8004190 <memcpy+0xc>
 800418e:	4770      	bx	lr
 8004190:	b510      	push	{r4, lr}
 8004192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004196:	4291      	cmp	r1, r2
 8004198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800419c:	d1f9      	bne.n	8004192 <memcpy+0xe>
 800419e:	bd10      	pop	{r4, pc}

080041a0 <_realloc_r>:
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	4680      	mov	r8, r0
 80041a6:	4615      	mov	r5, r2
 80041a8:	460c      	mov	r4, r1
 80041aa:	b921      	cbnz	r1, 80041b6 <_realloc_r+0x16>
 80041ac:	4611      	mov	r1, r2
 80041ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	f7ff bc39 	b.w	8003a28 <_malloc_r>
 80041b6:	b92a      	cbnz	r2, 80041c4 <_realloc_r+0x24>
 80041b8:	f7ff fbcc 	bl	8003954 <_free_r>
 80041bc:	2400      	movs	r4, #0
 80041be:	4620      	mov	r0, r4
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	f000 f81a 	bl	80041fc <_malloc_usable_size_r>
 80041c8:	4285      	cmp	r5, r0
 80041ca:	4606      	mov	r6, r0
 80041cc:	d802      	bhi.n	80041d4 <_realloc_r+0x34>
 80041ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041d2:	d8f4      	bhi.n	80041be <_realloc_r+0x1e>
 80041d4:	4629      	mov	r1, r5
 80041d6:	4640      	mov	r0, r8
 80041d8:	f7ff fc26 	bl	8003a28 <_malloc_r>
 80041dc:	4607      	mov	r7, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d0ec      	beq.n	80041bc <_realloc_r+0x1c>
 80041e2:	42b5      	cmp	r5, r6
 80041e4:	462a      	mov	r2, r5
 80041e6:	4621      	mov	r1, r4
 80041e8:	bf28      	it	cs
 80041ea:	4632      	movcs	r2, r6
 80041ec:	f7ff ffca 	bl	8004184 <memcpy>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4640      	mov	r0, r8
 80041f4:	f7ff fbae 	bl	8003954 <_free_r>
 80041f8:	463c      	mov	r4, r7
 80041fa:	e7e0      	b.n	80041be <_realloc_r+0x1e>

080041fc <_malloc_usable_size_r>:
 80041fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004200:	1f18      	subs	r0, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfbc      	itt	lt
 8004206:	580b      	ldrlt	r3, [r1, r0]
 8004208:	18c0      	addlt	r0, r0, r3
 800420a:	4770      	bx	lr

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
